services:
  # Postgres 数据库
  postgres:
    image: postgres:15
    container_name: ${COMPOSE_PROJECT_NAME}-postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/ddl.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ${NETWORK_NAME}
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis 服务
  redis:
    image: redis/redis-stack
    container_name: ${COMPOSE_PROJECT_NAME}-redis
    ports:
      - "${REDIS_PORT}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - ${NETWORK_NAME}
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "$${REDIS_PASSWORD}", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # go服务
  go-app:
    build:
      context: ../
      dockerfile: docker/Dockerfile
    container_name: go_app
    ports:
      - "${GO_APP_PORT}:8080"
    depends_on:
      - postgres
      - redis
    networks:
      - ${NETWORK_NAME}
    restart: unless-stopped
    env_file:
      - ../.env.docker

volumes:
  postgres_data:
  redis-data:

networks:
  saas-network:
    driver: bridge
