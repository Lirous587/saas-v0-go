package adapters

import (
	"database/sql"
  "fmt"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/pkg/errors"
	"{{.Module}}/internal/common/reskit/codes"
	"{{.Module}}/internal/{{.Domain}}/domain"
	"{{.Module}}/internal/common/orm"
	"{{.Module}}/internal/common/utils"
)

type {{.DomainTitle}}PSQLRepository struct {
}

func New{{.DomainTitle}}PSQLRepository() domain.{{.DomainTitle}}Repository {
	return &{{.DomainTitle}}PSQLRepository{}
}

func (repo *{{.DomainTitle}}PSQLRepository) FindByID(id int64) (*domain.{{.DomainTitle}}, error) {
	orm{{.DomainTitle}}, err := orm.Find{{.DomainTitle}}G(id)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, codes.Err{{.DomainTitle}}NotFound
		}
		return nil, err
	}
	return orm{{.DomainTitle}}ToDomain(orm{{.DomainTitle}}), nil
}

func (repo *{{.DomainTitle}}PSQLRepository) Create({{.Domain}} *domain.{{.DomainTitle}}) (*domain.{{.DomainTitle}},error)  {
	orm{{.DomainTitle}} := domain{{.DomainTitle}}ToORM({{.Domain}})

	if err := orm{{.DomainTitle}}.InsertG(boil.Infer()); err != nil {
		return nil, err
	}

	return orm{{.DomainTitle}}ToDomain(orm{{.DomainTitle}}), nil
}

func (repo *{{.DomainTitle}}PSQLRepository) Update({{.Domain}} *domain.{{.DomainTitle}}) error {
	orm{{.DomainTitle}} := domain{{.DomainTitle}}ToORM({{.Domain}})

	rows, err := orm{{.DomainTitle}}.UpdateG(boil.Infer())

	if err != nil {
		return err
	}
	if rows == 0 {
		return codes.Err{{.DomainTitle}}NotFound
	}

	return nil
}

func (repo *{{.DomainTitle}}PSQLRepository) Delete(id int64) error {
	orm{{.DomainTitle}} := orm.{{.DomainTitle}}{
		ID: id,
	}
	rows, err := orm{{.DomainTitle}}.DeleteG(false)

	if err != nil {
		return err
	}
	if rows == 0 {
		return codes.Err{{.DomainTitle}}NotFound
	}
	return nil
}

func (repo *{{.DomainTitle}}PSQLRepository) List(query *domain.{{.DomainTitle}}Query) (*domain.{{.DomainTitle}}List, error) {
	var whereMods []qm.QueryMod
	if query.Keyword != "" {
		like := "%" + query.Keyword + "%"
		whereMods = append(whereMods, qm.Where(fmt.Sprintf("(%s LIKE ? OR %s LIKE ?)", orm.{{.DomainTitle}}Columns.Title, orm.{{.DomainTitle}}Columns.Description), like, like))
	}
	// 1.计算total
	total, err := orm.{{.DomainTitle}}s(whereMods...).CountG()
	if err != nil {
		return nil, err
	}

	// 2.计算offset
	offset, err := utils.ComputeOffset(query.Page, query.PageSize)
	if err != nil {
		return nil, err
	}

	listMods := append(whereMods, qm.Offset(offset), qm.Limit(query.PageSize))

	// 3.查询数据
	{{.Domain}}, err := orm.{{.DomainTitle}}s(listMods...).AllG()
	if err != nil {
		return nil, err
	}

	return &domain.{{.DomainTitle}}List{
		Total: total,
		List:  orm{{.DomainTitle}}sToDomain({{.Domain}}),
	}, nil
}
