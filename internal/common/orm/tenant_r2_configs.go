// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// TenantR2Config is an object representing the database table.
type TenantR2Config struct {
	TenantID        int64     `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	AccountID       string    `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	AccessKeyID     string    `boil:"access_key_id" json:"access_key_id" toml:"access_key_id" yaml:"access_key_id"`
	SecretAccessKey string    `boil:"secret_access_key" json:"secret_access_key" toml:"secret_access_key" yaml:"secret_access_key"`
	PublicBucket    string    `boil:"public_bucket" json:"public_bucket" toml:"public_bucket" yaml:"public_bucket"`
	PublicURLPrefix string    `boil:"public_url_prefix" json:"public_url_prefix" toml:"public_url_prefix" yaml:"public_url_prefix"`
	DeleteBucket    string    `boil:"delete_bucket" json:"delete_bucket" toml:"delete_bucket" yaml:"delete_bucket"`
	CreatedAt       time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *tenantR2ConfigR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tenantR2ConfigL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TenantR2ConfigColumns = struct {
	TenantID        string
	AccountID       string
	AccessKeyID     string
	SecretAccessKey string
	PublicBucket    string
	PublicURLPrefix string
	DeleteBucket    string
	CreatedAt       string
	UpdatedAt       string
}{
	TenantID:        "tenant_id",
	AccountID:       "account_id",
	AccessKeyID:     "access_key_id",
	SecretAccessKey: "secret_access_key",
	PublicBucket:    "public_bucket",
	PublicURLPrefix: "public_url_prefix",
	DeleteBucket:    "delete_bucket",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
}

var TenantR2ConfigTableColumns = struct {
	TenantID        string
	AccountID       string
	AccessKeyID     string
	SecretAccessKey string
	PublicBucket    string
	PublicURLPrefix string
	DeleteBucket    string
	CreatedAt       string
	UpdatedAt       string
}{
	TenantID:        "tenant_r2_configs.tenant_id",
	AccountID:       "tenant_r2_configs.account_id",
	AccessKeyID:     "tenant_r2_configs.access_key_id",
	SecretAccessKey: "tenant_r2_configs.secret_access_key",
	PublicBucket:    "tenant_r2_configs.public_bucket",
	PublicURLPrefix: "tenant_r2_configs.public_url_prefix",
	DeleteBucket:    "tenant_r2_configs.delete_bucket",
	CreatedAt:       "tenant_r2_configs.created_at",
	UpdatedAt:       "tenant_r2_configs.updated_at",
}

// Generated where

var TenantR2ConfigWhere = struct {
	TenantID        whereHelperint64
	AccountID       whereHelperstring
	AccessKeyID     whereHelperstring
	SecretAccessKey whereHelperstring
	PublicBucket    whereHelperstring
	PublicURLPrefix whereHelperstring
	DeleteBucket    whereHelperstring
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
}{
	TenantID:        whereHelperint64{field: "\"tenant_r2_configs\".\"tenant_id\""},
	AccountID:       whereHelperstring{field: "\"tenant_r2_configs\".\"account_id\""},
	AccessKeyID:     whereHelperstring{field: "\"tenant_r2_configs\".\"access_key_id\""},
	SecretAccessKey: whereHelperstring{field: "\"tenant_r2_configs\".\"secret_access_key\""},
	PublicBucket:    whereHelperstring{field: "\"tenant_r2_configs\".\"public_bucket\""},
	PublicURLPrefix: whereHelperstring{field: "\"tenant_r2_configs\".\"public_url_prefix\""},
	DeleteBucket:    whereHelperstring{field: "\"tenant_r2_configs\".\"delete_bucket\""},
	CreatedAt:       whereHelpertime_Time{field: "\"tenant_r2_configs\".\"created_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"tenant_r2_configs\".\"updated_at\""},
}

// TenantR2ConfigRels is where relationship names are stored.
var TenantR2ConfigRels = struct {
	Tenant string
}{
	Tenant: "Tenant",
}

// tenantR2ConfigR is where relationships are stored.
type tenantR2ConfigR struct {
	Tenant *Tenant `boil:"Tenant" json:"Tenant" toml:"Tenant" yaml:"Tenant"`
}

// NewStruct creates a new relationship struct
func (*tenantR2ConfigR) NewStruct() *tenantR2ConfigR {
	return &tenantR2ConfigR{}
}

func (o *TenantR2Config) GetTenant() *Tenant {
	if o == nil {
		return nil
	}

	return o.R.GetTenant()
}

func (r *tenantR2ConfigR) GetTenant() *Tenant {
	if r == nil {
		return nil
	}

	return r.Tenant
}

// tenantR2ConfigL is where Load methods for each relationship are stored.
type tenantR2ConfigL struct{}

var (
	tenantR2ConfigAllColumns            = []string{"tenant_id", "account_id", "access_key_id", "secret_access_key", "public_bucket", "public_url_prefix", "delete_bucket", "created_at", "updated_at"}
	tenantR2ConfigColumnsWithoutDefault = []string{"tenant_id", "account_id", "access_key_id", "secret_access_key", "public_bucket", "public_url_prefix", "delete_bucket"}
	tenantR2ConfigColumnsWithDefault    = []string{"created_at", "updated_at"}
	tenantR2ConfigPrimaryKeyColumns     = []string{"tenant_id"}
	tenantR2ConfigGeneratedColumns      = []string{}
)

type (
	// TenantR2ConfigSlice is an alias for a slice of pointers to TenantR2Config.
	// This should almost always be used instead of []TenantR2Config.
	TenantR2ConfigSlice []*TenantR2Config
	// TenantR2ConfigHook is the signature for custom TenantR2Config hook methods
	TenantR2ConfigHook func(boil.Executor, *TenantR2Config) error

	tenantR2ConfigQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tenantR2ConfigType                 = reflect.TypeOf(&TenantR2Config{})
	tenantR2ConfigMapping              = queries.MakeStructMapping(tenantR2ConfigType)
	tenantR2ConfigPrimaryKeyMapping, _ = queries.BindMapping(tenantR2ConfigType, tenantR2ConfigMapping, tenantR2ConfigPrimaryKeyColumns)
	tenantR2ConfigInsertCacheMut       sync.RWMutex
	tenantR2ConfigInsertCache          = make(map[string]insertCache)
	tenantR2ConfigUpdateCacheMut       sync.RWMutex
	tenantR2ConfigUpdateCache          = make(map[string]updateCache)
	tenantR2ConfigUpsertCacheMut       sync.RWMutex
	tenantR2ConfigUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tenantR2ConfigAfterSelectMu sync.Mutex
var tenantR2ConfigAfterSelectHooks []TenantR2ConfigHook

var tenantR2ConfigBeforeInsertMu sync.Mutex
var tenantR2ConfigBeforeInsertHooks []TenantR2ConfigHook
var tenantR2ConfigAfterInsertMu sync.Mutex
var tenantR2ConfigAfterInsertHooks []TenantR2ConfigHook

var tenantR2ConfigBeforeUpdateMu sync.Mutex
var tenantR2ConfigBeforeUpdateHooks []TenantR2ConfigHook
var tenantR2ConfigAfterUpdateMu sync.Mutex
var tenantR2ConfigAfterUpdateHooks []TenantR2ConfigHook

var tenantR2ConfigBeforeDeleteMu sync.Mutex
var tenantR2ConfigBeforeDeleteHooks []TenantR2ConfigHook
var tenantR2ConfigAfterDeleteMu sync.Mutex
var tenantR2ConfigAfterDeleteHooks []TenantR2ConfigHook

var tenantR2ConfigBeforeUpsertMu sync.Mutex
var tenantR2ConfigBeforeUpsertHooks []TenantR2ConfigHook
var tenantR2ConfigAfterUpsertMu sync.Mutex
var tenantR2ConfigAfterUpsertHooks []TenantR2ConfigHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TenantR2Config) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantR2ConfigAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TenantR2Config) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantR2ConfigBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TenantR2Config) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantR2ConfigAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TenantR2Config) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantR2ConfigBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TenantR2Config) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantR2ConfigAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TenantR2Config) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantR2ConfigBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TenantR2Config) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantR2ConfigAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TenantR2Config) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantR2ConfigBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TenantR2Config) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantR2ConfigAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTenantR2ConfigHook registers your hook function for all future operations.
func AddTenantR2ConfigHook(hookPoint boil.HookPoint, tenantR2ConfigHook TenantR2ConfigHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tenantR2ConfigAfterSelectMu.Lock()
		tenantR2ConfigAfterSelectHooks = append(tenantR2ConfigAfterSelectHooks, tenantR2ConfigHook)
		tenantR2ConfigAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		tenantR2ConfigBeforeInsertMu.Lock()
		tenantR2ConfigBeforeInsertHooks = append(tenantR2ConfigBeforeInsertHooks, tenantR2ConfigHook)
		tenantR2ConfigBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		tenantR2ConfigAfterInsertMu.Lock()
		tenantR2ConfigAfterInsertHooks = append(tenantR2ConfigAfterInsertHooks, tenantR2ConfigHook)
		tenantR2ConfigAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		tenantR2ConfigBeforeUpdateMu.Lock()
		tenantR2ConfigBeforeUpdateHooks = append(tenantR2ConfigBeforeUpdateHooks, tenantR2ConfigHook)
		tenantR2ConfigBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		tenantR2ConfigAfterUpdateMu.Lock()
		tenantR2ConfigAfterUpdateHooks = append(tenantR2ConfigAfterUpdateHooks, tenantR2ConfigHook)
		tenantR2ConfigAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		tenantR2ConfigBeforeDeleteMu.Lock()
		tenantR2ConfigBeforeDeleteHooks = append(tenantR2ConfigBeforeDeleteHooks, tenantR2ConfigHook)
		tenantR2ConfigBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		tenantR2ConfigAfterDeleteMu.Lock()
		tenantR2ConfigAfterDeleteHooks = append(tenantR2ConfigAfterDeleteHooks, tenantR2ConfigHook)
		tenantR2ConfigAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		tenantR2ConfigBeforeUpsertMu.Lock()
		tenantR2ConfigBeforeUpsertHooks = append(tenantR2ConfigBeforeUpsertHooks, tenantR2ConfigHook)
		tenantR2ConfigBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		tenantR2ConfigAfterUpsertMu.Lock()
		tenantR2ConfigAfterUpsertHooks = append(tenantR2ConfigAfterUpsertHooks, tenantR2ConfigHook)
		tenantR2ConfigAfterUpsertMu.Unlock()
	}
}

// OneG returns a single tenantR2Config record from the query using the global executor.
func (q tenantR2ConfigQuery) OneG() (*TenantR2Config, error) {
	return q.One(boil.GetDB())
}

// One returns a single tenantR2Config record from the query.
func (q tenantR2ConfigQuery) One(exec boil.Executor) (*TenantR2Config, error) {
	o := &TenantR2Config{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for tenant_r2_configs")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TenantR2Config records from the query using the global executor.
func (q tenantR2ConfigQuery) AllG() (TenantR2ConfigSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all TenantR2Config records from the query.
func (q tenantR2ConfigQuery) All(exec boil.Executor) (TenantR2ConfigSlice, error) {
	var o []*TenantR2Config

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to TenantR2Config slice")
	}

	if len(tenantR2ConfigAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TenantR2Config records in the query using the global executor
func (q tenantR2ConfigQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all TenantR2Config records in the query.
func (q tenantR2ConfigQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count tenant_r2_configs rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q tenantR2ConfigQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q tenantR2ConfigQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if tenant_r2_configs exists")
	}

	return count > 0, nil
}

// Tenant pointed to by the foreign key.
func (o *TenantR2Config) Tenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TenantID),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// LoadTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tenantR2ConfigL) LoadTenant(e boil.Executor, singular bool, maybeTenantR2Config interface{}, mods queries.Applicator) error {
	var slice []*TenantR2Config
	var object *TenantR2Config

	if singular {
		var ok bool
		object, ok = maybeTenantR2Config.(*TenantR2Config)
		if !ok {
			object = new(TenantR2Config)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenantR2Config)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenantR2Config))
			}
		}
	} else {
		s, ok := maybeTenantR2Config.(*[]*TenantR2Config)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenantR2Config)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenantR2Config))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tenantR2ConfigR{}
		}
		args[object.TenantID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantR2ConfigR{}
			}

			args[obj.TenantID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.TenantR2Config = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TenantID == foreign.ID {
				local.R.Tenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.TenantR2Config = local
				break
			}
		}
	}

	return nil
}

// SetTenantG of the tenantR2Config to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.TenantR2Config.
// Uses the global database handle.
func (o *TenantR2Config) SetTenantG(insert bool, related *Tenant) error {
	return o.SetTenant(boil.GetDB(), insert, related)
}

// SetTenant of the tenantR2Config to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.TenantR2Config.
func (o *TenantR2Config) SetTenant(exec boil.Executor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tenant_r2_configs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
		strmangle.WhereClause("\"", "\"", 2, tenantR2ConfigPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.TenantID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TenantID = related.ID
	if o.R == nil {
		o.R = &tenantR2ConfigR{
			Tenant: related,
		}
	} else {
		o.R.Tenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			TenantR2Config: o,
		}
	} else {
		related.R.TenantR2Config = o
	}

	return nil
}

// TenantR2Configs retrieves all the records using an executor.
func TenantR2Configs(mods ...qm.QueryMod) tenantR2ConfigQuery {
	mods = append(mods, qm.From("\"tenant_r2_configs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tenant_r2_configs\".*"})
	}

	return tenantR2ConfigQuery{q}
}

// FindTenantR2ConfigG retrieves a single record by ID.
func FindTenantR2ConfigG(tenantID int64, selectCols ...string) (*TenantR2Config, error) {
	return FindTenantR2Config(boil.GetDB(), tenantID, selectCols...)
}

// FindTenantR2Config retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTenantR2Config(exec boil.Executor, tenantID int64, selectCols ...string) (*TenantR2Config, error) {
	tenantR2ConfigObj := &TenantR2Config{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tenant_r2_configs\" where \"tenant_id\"=$1", sel,
	)

	q := queries.Raw(query, tenantID)

	err := q.Bind(nil, exec, tenantR2ConfigObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from tenant_r2_configs")
	}

	if err = tenantR2ConfigObj.doAfterSelectHooks(exec); err != nil {
		return tenantR2ConfigObj, err
	}

	return tenantR2ConfigObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TenantR2Config) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TenantR2Config) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no tenant_r2_configs provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tenantR2ConfigColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tenantR2ConfigInsertCacheMut.RLock()
	cache, cached := tenantR2ConfigInsertCache[key]
	tenantR2ConfigInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tenantR2ConfigAllColumns,
			tenantR2ConfigColumnsWithDefault,
			tenantR2ConfigColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tenantR2ConfigType, tenantR2ConfigMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tenantR2ConfigType, tenantR2ConfigMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tenant_r2_configs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tenant_r2_configs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into tenant_r2_configs")
	}

	if !cached {
		tenantR2ConfigInsertCacheMut.Lock()
		tenantR2ConfigInsertCache[key] = cache
		tenantR2ConfigInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single TenantR2Config record using the global executor.
// See Update for more documentation.
func (o *TenantR2Config) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the TenantR2Config.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TenantR2Config) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tenantR2ConfigUpdateCacheMut.RLock()
	cache, cached := tenantR2ConfigUpdateCache[key]
	tenantR2ConfigUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tenantR2ConfigAllColumns,
			tenantR2ConfigPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update tenant_r2_configs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tenant_r2_configs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tenantR2ConfigPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tenantR2ConfigType, tenantR2ConfigMapping, append(wl, tenantR2ConfigPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update tenant_r2_configs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for tenant_r2_configs")
	}

	if !cached {
		tenantR2ConfigUpdateCacheMut.Lock()
		tenantR2ConfigUpdateCache[key] = cache
		tenantR2ConfigUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q tenantR2ConfigQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q tenantR2ConfigQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for tenant_r2_configs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for tenant_r2_configs")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TenantR2ConfigSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TenantR2ConfigSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantR2ConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tenant_r2_configs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tenantR2ConfigPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in tenantR2Config slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all tenantR2Config")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TenantR2Config) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TenantR2Config) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no tenant_r2_configs provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tenantR2ConfigColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tenantR2ConfigUpsertCacheMut.RLock()
	cache, cached := tenantR2ConfigUpsertCache[key]
	tenantR2ConfigUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			tenantR2ConfigAllColumns,
			tenantR2ConfigColumnsWithDefault,
			tenantR2ConfigColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tenantR2ConfigAllColumns,
			tenantR2ConfigPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert tenant_r2_configs, could not build update column list")
		}

		ret := strmangle.SetComplement(tenantR2ConfigAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(tenantR2ConfigPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert tenant_r2_configs, could not build conflict column list")
			}

			conflict = make([]string, len(tenantR2ConfigPrimaryKeyColumns))
			copy(conflict, tenantR2ConfigPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tenant_r2_configs\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(tenantR2ConfigType, tenantR2ConfigMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tenantR2ConfigType, tenantR2ConfigMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert tenant_r2_configs")
	}

	if !cached {
		tenantR2ConfigUpsertCacheMut.Lock()
		tenantR2ConfigUpsertCache[key] = cache
		tenantR2ConfigUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single TenantR2Config record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TenantR2Config) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single TenantR2Config record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TenantR2Config) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no TenantR2Config provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tenantR2ConfigPrimaryKeyMapping)
	sql := "DELETE FROM \"tenant_r2_configs\" WHERE \"tenant_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from tenant_r2_configs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for tenant_r2_configs")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q tenantR2ConfigQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q tenantR2ConfigQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no tenantR2ConfigQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from tenant_r2_configs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for tenant_r2_configs")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TenantR2ConfigSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TenantR2ConfigSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tenantR2ConfigBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantR2ConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tenant_r2_configs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tenantR2ConfigPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from tenantR2Config slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for tenant_r2_configs")
	}

	if len(tenantR2ConfigAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TenantR2Config) ReloadG() error {
	if o == nil {
		return errors.New("orm: no TenantR2Config provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TenantR2Config) Reload(exec boil.Executor) error {
	ret, err := FindTenantR2Config(exec, o.TenantID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TenantR2ConfigSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("orm: empty TenantR2ConfigSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TenantR2ConfigSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TenantR2ConfigSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantR2ConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tenant_r2_configs\".* FROM \"tenant_r2_configs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tenantR2ConfigPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in TenantR2ConfigSlice")
	}

	*o = slice

	return nil
}

// TenantR2ConfigExistsG checks if the TenantR2Config row exists.
func TenantR2ConfigExistsG(tenantID int64) (bool, error) {
	return TenantR2ConfigExists(boil.GetDB(), tenantID)
}

// TenantR2ConfigExists checks if the TenantR2Config row exists.
func TenantR2ConfigExists(exec boil.Executor, tenantID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tenant_r2_configs\" where \"tenant_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, tenantID)
	}
	row := exec.QueryRow(sql, tenantID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if tenant_r2_configs exists")
	}

	return exists, nil
}

// Exists checks if the TenantR2Config row exists.
func (o *TenantR2Config) Exists(exec boil.Executor) (bool, error) {
	return TenantR2ConfigExists(exec, o.TenantID)
}
