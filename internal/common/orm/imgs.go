// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Img is an object representing the database table.
type Img struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	TenantID    string      `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	Path        string      `boil:"path" json:"path" toml:"path" yaml:"path"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt   null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	CategoryID  null.String `boil:"category_id" json:"category_id,omitempty" toml:"category_id" yaml:"category_id,omitempty"`

	R *imgR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L imgL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ImgColumns = struct {
	ID          string
	TenantID    string
	Path        string
	Description string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
	CategoryID  string
}{
	ID:          "id",
	TenantID:    "tenant_id",
	Path:        "path",
	Description: "description",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
	CategoryID:  "category_id",
}

var ImgTableColumns = struct {
	ID          string
	TenantID    string
	Path        string
	Description string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
	CategoryID  string
}{
	ID:          "imgs.id",
	TenantID:    "imgs.tenant_id",
	Path:        "imgs.path",
	Description: "imgs.description",
	CreatedAt:   "imgs.created_at",
	UpdatedAt:   "imgs.updated_at",
	DeletedAt:   "imgs.deleted_at",
	CategoryID:  "imgs.category_id",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ImgWhere = struct {
	ID          whereHelperstring
	TenantID    whereHelperstring
	Path        whereHelperstring
	Description whereHelpernull_String
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
	CategoryID  whereHelpernull_String
}{
	ID:          whereHelperstring{field: "\"imgs\".\"id\""},
	TenantID:    whereHelperstring{field: "\"imgs\".\"tenant_id\""},
	Path:        whereHelperstring{field: "\"imgs\".\"path\""},
	Description: whereHelpernull_String{field: "\"imgs\".\"description\""},
	CreatedAt:   whereHelpertime_Time{field: "\"imgs\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"imgs\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"imgs\".\"deleted_at\""},
	CategoryID:  whereHelpernull_String{field: "\"imgs\".\"category_id\""},
}

// ImgRels is where relationship names are stored.
var ImgRels = struct {
	Category string
	Tenant   string
}{
	Category: "Category",
	Tenant:   "Tenant",
}

// imgR is where relationships are stored.
type imgR struct {
	Category *ImgCategory `boil:"Category" json:"Category" toml:"Category" yaml:"Category"`
	Tenant   *Tenant      `boil:"Tenant" json:"Tenant" toml:"Tenant" yaml:"Tenant"`
}

// NewStruct creates a new relationship struct
func (*imgR) NewStruct() *imgR {
	return &imgR{}
}

func (o *Img) GetCategory() *ImgCategory {
	if o == nil {
		return nil
	}

	return o.R.GetCategory()
}

func (r *imgR) GetCategory() *ImgCategory {
	if r == nil {
		return nil
	}

	return r.Category
}

func (o *Img) GetTenant() *Tenant {
	if o == nil {
		return nil
	}

	return o.R.GetTenant()
}

func (r *imgR) GetTenant() *Tenant {
	if r == nil {
		return nil
	}

	return r.Tenant
}

// imgL is where Load methods for each relationship are stored.
type imgL struct{}

var (
	imgAllColumns            = []string{"id", "tenant_id", "path", "description", "created_at", "updated_at", "deleted_at", "category_id"}
	imgColumnsWithoutDefault = []string{"tenant_id", "path"}
	imgColumnsWithDefault    = []string{"id", "description", "created_at", "updated_at", "deleted_at", "category_id"}
	imgPrimaryKeyColumns     = []string{"id"}
	imgGeneratedColumns      = []string{}
)

type (
	// ImgSlice is an alias for a slice of pointers to Img.
	// This should almost always be used instead of []Img.
	ImgSlice []*Img
	// ImgHook is the signature for custom Img hook methods
	ImgHook func(boil.Executor, *Img) error

	imgQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	imgType                 = reflect.TypeOf(&Img{})
	imgMapping              = queries.MakeStructMapping(imgType)
	imgPrimaryKeyMapping, _ = queries.BindMapping(imgType, imgMapping, imgPrimaryKeyColumns)
	imgInsertCacheMut       sync.RWMutex
	imgInsertCache          = make(map[string]insertCache)
	imgUpdateCacheMut       sync.RWMutex
	imgUpdateCache          = make(map[string]updateCache)
	imgUpsertCacheMut       sync.RWMutex
	imgUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var imgAfterSelectMu sync.Mutex
var imgAfterSelectHooks []ImgHook

var imgBeforeInsertMu sync.Mutex
var imgBeforeInsertHooks []ImgHook
var imgAfterInsertMu sync.Mutex
var imgAfterInsertHooks []ImgHook

var imgBeforeUpdateMu sync.Mutex
var imgBeforeUpdateHooks []ImgHook
var imgAfterUpdateMu sync.Mutex
var imgAfterUpdateHooks []ImgHook

var imgBeforeDeleteMu sync.Mutex
var imgBeforeDeleteHooks []ImgHook
var imgAfterDeleteMu sync.Mutex
var imgAfterDeleteHooks []ImgHook

var imgBeforeUpsertMu sync.Mutex
var imgBeforeUpsertHooks []ImgHook
var imgAfterUpsertMu sync.Mutex
var imgAfterUpsertHooks []ImgHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Img) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range imgAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Img) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range imgBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Img) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range imgAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Img) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range imgBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Img) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range imgAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Img) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range imgBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Img) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range imgAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Img) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range imgBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Img) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range imgAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddImgHook registers your hook function for all future operations.
func AddImgHook(hookPoint boil.HookPoint, imgHook ImgHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		imgAfterSelectMu.Lock()
		imgAfterSelectHooks = append(imgAfterSelectHooks, imgHook)
		imgAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		imgBeforeInsertMu.Lock()
		imgBeforeInsertHooks = append(imgBeforeInsertHooks, imgHook)
		imgBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		imgAfterInsertMu.Lock()
		imgAfterInsertHooks = append(imgAfterInsertHooks, imgHook)
		imgAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		imgBeforeUpdateMu.Lock()
		imgBeforeUpdateHooks = append(imgBeforeUpdateHooks, imgHook)
		imgBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		imgAfterUpdateMu.Lock()
		imgAfterUpdateHooks = append(imgAfterUpdateHooks, imgHook)
		imgAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		imgBeforeDeleteMu.Lock()
		imgBeforeDeleteHooks = append(imgBeforeDeleteHooks, imgHook)
		imgBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		imgAfterDeleteMu.Lock()
		imgAfterDeleteHooks = append(imgAfterDeleteHooks, imgHook)
		imgAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		imgBeforeUpsertMu.Lock()
		imgBeforeUpsertHooks = append(imgBeforeUpsertHooks, imgHook)
		imgBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		imgAfterUpsertMu.Lock()
		imgAfterUpsertHooks = append(imgAfterUpsertHooks, imgHook)
		imgAfterUpsertMu.Unlock()
	}
}

// OneG returns a single img record from the query using the global executor.
func (q imgQuery) OneG() (*Img, error) {
	return q.One(boil.GetDB())
}

// One returns a single img record from the query.
func (q imgQuery) One(exec boil.Executor) (*Img, error) {
	o := &Img{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for imgs")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Img records from the query using the global executor.
func (q imgQuery) AllG() (ImgSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Img records from the query.
func (q imgQuery) All(exec boil.Executor) (ImgSlice, error) {
	var o []*Img

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Img slice")
	}

	if len(imgAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Img records in the query using the global executor
func (q imgQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Img records in the query.
func (q imgQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count imgs rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q imgQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q imgQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if imgs exists")
	}

	return count > 0, nil
}

// Category pointed to by the foreign key.
func (o *Img) Category(mods ...qm.QueryMod) imgCategoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	return ImgCategories(queryMods...)
}

// Tenant pointed to by the foreign key.
func (o *Img) Tenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TenantID),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (imgL) LoadCategory(e boil.Executor, singular bool, maybeImg interface{}, mods queries.Applicator) error {
	var slice []*Img
	var object *Img

	if singular {
		var ok bool
		object, ok = maybeImg.(*Img)
		if !ok {
			object = new(Img)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeImg)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeImg))
			}
		}
	} else {
		s, ok := maybeImg.(*[]*Img)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeImg)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeImg))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &imgR{}
		}
		if !queries.IsNil(object.CategoryID) {
			args[object.CategoryID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &imgR{}
			}

			if !queries.IsNil(obj.CategoryID) {
				args[obj.CategoryID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`img_categories`),
		qm.WhereIn(`img_categories.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ImgCategory")
	}

	var resultSlice []*ImgCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ImgCategory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for img_categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for img_categories")
	}

	if len(imgCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Category = foreign
		if foreign.R == nil {
			foreign.R = &imgCategoryR{}
		}
		foreign.R.CategoryImgs = append(foreign.R.CategoryImgs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CategoryID, foreign.ID) {
				local.R.Category = foreign
				if foreign.R == nil {
					foreign.R = &imgCategoryR{}
				}
				foreign.R.CategoryImgs = append(foreign.R.CategoryImgs, local)
				break
			}
		}
	}

	return nil
}

// LoadTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (imgL) LoadTenant(e boil.Executor, singular bool, maybeImg interface{}, mods queries.Applicator) error {
	var slice []*Img
	var object *Img

	if singular {
		var ok bool
		object, ok = maybeImg.(*Img)
		if !ok {
			object = new(Img)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeImg)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeImg))
			}
		}
	} else {
		s, ok := maybeImg.(*[]*Img)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeImg)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeImg))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &imgR{}
		}
		args[object.TenantID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &imgR{}
			}

			args[obj.TenantID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.Imgs = append(foreign.R.Imgs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TenantID == foreign.ID {
				local.R.Tenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.Imgs = append(foreign.R.Imgs, local)
				break
			}
		}
	}

	return nil
}

// SetCategoryG of the img to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.CategoryImgs.
// Uses the global database handle.
func (o *Img) SetCategoryG(insert bool, related *ImgCategory) error {
	return o.SetCategory(boil.GetDB(), insert, related)
}

// SetCategory of the img to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.CategoryImgs.
func (o *Img) SetCategory(exec boil.Executor, insert bool, related *ImgCategory) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"imgs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
		strmangle.WhereClause("\"", "\"", 2, imgPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CategoryID, related.ID)
	if o.R == nil {
		o.R = &imgR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &imgCategoryR{
			CategoryImgs: ImgSlice{o},
		}
	} else {
		related.R.CategoryImgs = append(related.R.CategoryImgs, o)
	}

	return nil
}

// RemoveCategoryG relationship.
// Sets o.R.Category to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Img) RemoveCategoryG(related *ImgCategory) error {
	return o.RemoveCategory(boil.GetDB(), related)
}

// RemoveCategory relationship.
// Sets o.R.Category to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Img) RemoveCategory(exec boil.Executor, related *ImgCategory) error {
	var err error

	queries.SetScanner(&o.CategoryID, nil)
	if _, err = o.Update(exec, boil.Whitelist("category_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Category = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CategoryImgs {
		if queries.Equal(o.CategoryID, ri.CategoryID) {
			continue
		}

		ln := len(related.R.CategoryImgs)
		if ln > 1 && i < ln-1 {
			related.R.CategoryImgs[i] = related.R.CategoryImgs[ln-1]
		}
		related.R.CategoryImgs = related.R.CategoryImgs[:ln-1]
		break
	}
	return nil
}

// SetTenantG of the img to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.Imgs.
// Uses the global database handle.
func (o *Img) SetTenantG(insert bool, related *Tenant) error {
	return o.SetTenant(boil.GetDB(), insert, related)
}

// SetTenant of the img to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.Imgs.
func (o *Img) SetTenant(exec boil.Executor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"imgs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
		strmangle.WhereClause("\"", "\"", 2, imgPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TenantID = related.ID
	if o.R == nil {
		o.R = &imgR{
			Tenant: related,
		}
	} else {
		o.R.Tenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			Imgs: ImgSlice{o},
		}
	} else {
		related.R.Imgs = append(related.R.Imgs, o)
	}

	return nil
}

// Imgs retrieves all the records using an executor.
func Imgs(mods ...qm.QueryMod) imgQuery {
	mods = append(mods, qm.From("\"imgs\""), qmhelper.WhereIsNull("\"imgs\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"imgs\".*"})
	}

	return imgQuery{q}
}

// FindImgG retrieves a single record by ID.
func FindImgG(iD string, selectCols ...string) (*Img, error) {
	return FindImg(boil.GetDB(), iD, selectCols...)
}

// FindImg retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindImg(exec boil.Executor, iD string, selectCols ...string) (*Img, error) {
	imgObj := &Img{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"imgs\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, imgObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from imgs")
	}

	if err = imgObj.doAfterSelectHooks(exec); err != nil {
		return imgObj, err
	}

	return imgObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Img) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Img) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no imgs provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(imgColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	imgInsertCacheMut.RLock()
	cache, cached := imgInsertCache[key]
	imgInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			imgAllColumns,
			imgColumnsWithDefault,
			imgColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(imgType, imgMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(imgType, imgMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"imgs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"imgs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into imgs")
	}

	if !cached {
		imgInsertCacheMut.Lock()
		imgInsertCache[key] = cache
		imgInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Img record using the global executor.
// See Update for more documentation.
func (o *Img) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Img.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Img) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	imgUpdateCacheMut.RLock()
	cache, cached := imgUpdateCache[key]
	imgUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			imgAllColumns,
			imgPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update imgs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"imgs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, imgPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(imgType, imgMapping, append(wl, imgPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update imgs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for imgs")
	}

	if !cached {
		imgUpdateCacheMut.Lock()
		imgUpdateCache[key] = cache
		imgUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q imgQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q imgQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for imgs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for imgs")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ImgSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ImgSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), imgPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"imgs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, imgPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in img slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all img")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Img) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Img) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no imgs provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(imgColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	imgUpsertCacheMut.RLock()
	cache, cached := imgUpsertCache[key]
	imgUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			imgAllColumns,
			imgColumnsWithDefault,
			imgColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			imgAllColumns,
			imgPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert imgs, could not build update column list")
		}

		ret := strmangle.SetComplement(imgAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(imgPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert imgs, could not build conflict column list")
			}

			conflict = make([]string, len(imgPrimaryKeyColumns))
			copy(conflict, imgPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"imgs\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(imgType, imgMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(imgType, imgMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert imgs")
	}

	if !cached {
		imgUpsertCacheMut.Lock()
		imgUpsertCache[key] = cache
		imgUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Img record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Img) DeleteG(hardDelete bool) (int64, error) {
	return o.Delete(boil.GetDB(), hardDelete)
}

// Delete deletes a single Img record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Img) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Img provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), imgPrimaryKeyMapping)
		sql = "DELETE FROM \"imgs\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"imgs\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(imgType, imgMapping, append(wl, imgPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from imgs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for imgs")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q imgQuery) DeleteAllG(hardDelete bool) (int64, error) {
	return q.DeleteAll(boil.GetDB(), hardDelete)
}

// DeleteAll deletes all matching rows.
func (q imgQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no imgQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from imgs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for imgs")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ImgSlice) DeleteAllG(hardDelete bool) (int64, error) {
	return o.DeleteAll(boil.GetDB(), hardDelete)
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ImgSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(imgBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), imgPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"imgs\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, imgPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), imgPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"imgs\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, imgPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from img slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for imgs")
	}

	if len(imgAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Img) ReloadG() error {
	if o == nil {
		return errors.New("orm: no Img provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Img) Reload(exec boil.Executor) error {
	ret, err := FindImg(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ImgSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("orm: empty ImgSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ImgSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ImgSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), imgPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"imgs\".* FROM \"imgs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, imgPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in ImgSlice")
	}

	*o = slice

	return nil
}

// ImgExistsG checks if the Img row exists.
func ImgExistsG(iD string) (bool, error) {
	return ImgExists(boil.GetDB(), iD)
}

// ImgExists checks if the Img row exists.
func ImgExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"imgs\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if imgs exists")
	}

	return exists, nil
}

// Exists checks if the Img row exists.
func (o *Img) Exists(exec boil.Executor) (bool, error) {
	return ImgExists(exec, o.ID)
}
