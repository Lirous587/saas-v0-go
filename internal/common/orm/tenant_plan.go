// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// TenantPlan is an object representing the database table.
type TenantPlan struct {
	TenantID  int64     `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	PlanID    int64     `boil:"plan_id" json:"plan_id" toml:"plan_id" yaml:"plan_id"`
	StartAt   time.Time `boil:"start_at" json:"start_at" toml:"start_at" yaml:"start_at"`
	EndAt     null.Time `boil:"end_at" json:"end_at,omitempty" toml:"end_at" yaml:"end_at,omitempty"`
	CreatorID int64     `boil:"creator_id" json:"creator_id" toml:"creator_id" yaml:"creator_id"`

	R *tenantPlanR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tenantPlanL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TenantPlanColumns = struct {
	TenantID  string
	PlanID    string
	StartAt   string
	EndAt     string
	CreatorID string
}{
	TenantID:  "tenant_id",
	PlanID:    "plan_id",
	StartAt:   "start_at",
	EndAt:     "end_at",
	CreatorID: "creator_id",
}

var TenantPlanTableColumns = struct {
	TenantID  string
	PlanID    string
	StartAt   string
	EndAt     string
	CreatorID string
}{
	TenantID:  "tenant_plan.tenant_id",
	PlanID:    "tenant_plan.plan_id",
	StartAt:   "tenant_plan.start_at",
	EndAt:     "tenant_plan.end_at",
	CreatorID: "tenant_plan.creator_id",
}

// Generated where

var TenantPlanWhere = struct {
	TenantID  whereHelperint64
	PlanID    whereHelperint64
	StartAt   whereHelpertime_Time
	EndAt     whereHelpernull_Time
	CreatorID whereHelperint64
}{
	TenantID:  whereHelperint64{field: "\"tenant_plan\".\"tenant_id\""},
	PlanID:    whereHelperint64{field: "\"tenant_plan\".\"plan_id\""},
	StartAt:   whereHelpertime_Time{field: "\"tenant_plan\".\"start_at\""},
	EndAt:     whereHelpernull_Time{field: "\"tenant_plan\".\"end_at\""},
	CreatorID: whereHelperint64{field: "\"tenant_plan\".\"creator_id\""},
}

// TenantPlanRels is where relationship names are stored.
var TenantPlanRels = struct {
	Plan    string
	Creator string
	Tenant  string
}{
	Plan:    "Plan",
	Creator: "Creator",
	Tenant:  "Tenant",
}

// tenantPlanR is where relationships are stored.
type tenantPlanR struct {
	Plan    *Plan   `boil:"Plan" json:"Plan" toml:"Plan" yaml:"Plan"`
	Creator *User   `boil:"Creator" json:"Creator" toml:"Creator" yaml:"Creator"`
	Tenant  *Tenant `boil:"Tenant" json:"Tenant" toml:"Tenant" yaml:"Tenant"`
}

// NewStruct creates a new relationship struct
func (*tenantPlanR) NewStruct() *tenantPlanR {
	return &tenantPlanR{}
}

func (o *TenantPlan) GetPlan() *Plan {
	if o == nil {
		return nil
	}

	return o.R.GetPlan()
}

func (r *tenantPlanR) GetPlan() *Plan {
	if r == nil {
		return nil
	}

	return r.Plan
}

func (o *TenantPlan) GetCreator() *User {
	if o == nil {
		return nil
	}

	return o.R.GetCreator()
}

func (r *tenantPlanR) GetCreator() *User {
	if r == nil {
		return nil
	}

	return r.Creator
}

func (o *TenantPlan) GetTenant() *Tenant {
	if o == nil {
		return nil
	}

	return o.R.GetTenant()
}

func (r *tenantPlanR) GetTenant() *Tenant {
	if r == nil {
		return nil
	}

	return r.Tenant
}

// tenantPlanL is where Load methods for each relationship are stored.
type tenantPlanL struct{}

var (
	tenantPlanAllColumns            = []string{"tenant_id", "plan_id", "start_at", "end_at", "creator_id"}
	tenantPlanColumnsWithoutDefault = []string{"tenant_id", "plan_id", "creator_id"}
	tenantPlanColumnsWithDefault    = []string{"start_at", "end_at"}
	tenantPlanPrimaryKeyColumns     = []string{"tenant_id", "plan_id"}
	tenantPlanGeneratedColumns      = []string{}
)

type (
	// TenantPlanSlice is an alias for a slice of pointers to TenantPlan.
	// This should almost always be used instead of []TenantPlan.
	TenantPlanSlice []*TenantPlan
	// TenantPlanHook is the signature for custom TenantPlan hook methods
	TenantPlanHook func(boil.Executor, *TenantPlan) error

	tenantPlanQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tenantPlanType                 = reflect.TypeOf(&TenantPlan{})
	tenantPlanMapping              = queries.MakeStructMapping(tenantPlanType)
	tenantPlanPrimaryKeyMapping, _ = queries.BindMapping(tenantPlanType, tenantPlanMapping, tenantPlanPrimaryKeyColumns)
	tenantPlanInsertCacheMut       sync.RWMutex
	tenantPlanInsertCache          = make(map[string]insertCache)
	tenantPlanUpdateCacheMut       sync.RWMutex
	tenantPlanUpdateCache          = make(map[string]updateCache)
	tenantPlanUpsertCacheMut       sync.RWMutex
	tenantPlanUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tenantPlanAfterSelectMu sync.Mutex
var tenantPlanAfterSelectHooks []TenantPlanHook

var tenantPlanBeforeInsertMu sync.Mutex
var tenantPlanBeforeInsertHooks []TenantPlanHook
var tenantPlanAfterInsertMu sync.Mutex
var tenantPlanAfterInsertHooks []TenantPlanHook

var tenantPlanBeforeUpdateMu sync.Mutex
var tenantPlanBeforeUpdateHooks []TenantPlanHook
var tenantPlanAfterUpdateMu sync.Mutex
var tenantPlanAfterUpdateHooks []TenantPlanHook

var tenantPlanBeforeDeleteMu sync.Mutex
var tenantPlanBeforeDeleteHooks []TenantPlanHook
var tenantPlanAfterDeleteMu sync.Mutex
var tenantPlanAfterDeleteHooks []TenantPlanHook

var tenantPlanBeforeUpsertMu sync.Mutex
var tenantPlanBeforeUpsertHooks []TenantPlanHook
var tenantPlanAfterUpsertMu sync.Mutex
var tenantPlanAfterUpsertHooks []TenantPlanHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TenantPlan) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantPlanAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TenantPlan) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantPlanBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TenantPlan) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantPlanAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TenantPlan) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantPlanBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TenantPlan) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantPlanAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TenantPlan) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantPlanBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TenantPlan) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantPlanAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TenantPlan) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantPlanBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TenantPlan) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantPlanAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTenantPlanHook registers your hook function for all future operations.
func AddTenantPlanHook(hookPoint boil.HookPoint, tenantPlanHook TenantPlanHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tenantPlanAfterSelectMu.Lock()
		tenantPlanAfterSelectHooks = append(tenantPlanAfterSelectHooks, tenantPlanHook)
		tenantPlanAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		tenantPlanBeforeInsertMu.Lock()
		tenantPlanBeforeInsertHooks = append(tenantPlanBeforeInsertHooks, tenantPlanHook)
		tenantPlanBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		tenantPlanAfterInsertMu.Lock()
		tenantPlanAfterInsertHooks = append(tenantPlanAfterInsertHooks, tenantPlanHook)
		tenantPlanAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		tenantPlanBeforeUpdateMu.Lock()
		tenantPlanBeforeUpdateHooks = append(tenantPlanBeforeUpdateHooks, tenantPlanHook)
		tenantPlanBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		tenantPlanAfterUpdateMu.Lock()
		tenantPlanAfterUpdateHooks = append(tenantPlanAfterUpdateHooks, tenantPlanHook)
		tenantPlanAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		tenantPlanBeforeDeleteMu.Lock()
		tenantPlanBeforeDeleteHooks = append(tenantPlanBeforeDeleteHooks, tenantPlanHook)
		tenantPlanBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		tenantPlanAfterDeleteMu.Lock()
		tenantPlanAfterDeleteHooks = append(tenantPlanAfterDeleteHooks, tenantPlanHook)
		tenantPlanAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		tenantPlanBeforeUpsertMu.Lock()
		tenantPlanBeforeUpsertHooks = append(tenantPlanBeforeUpsertHooks, tenantPlanHook)
		tenantPlanBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		tenantPlanAfterUpsertMu.Lock()
		tenantPlanAfterUpsertHooks = append(tenantPlanAfterUpsertHooks, tenantPlanHook)
		tenantPlanAfterUpsertMu.Unlock()
	}
}

// OneG returns a single tenantPlan record from the query using the global executor.
func (q tenantPlanQuery) OneG() (*TenantPlan, error) {
	return q.One(boil.GetDB())
}

// One returns a single tenantPlan record from the query.
func (q tenantPlanQuery) One(exec boil.Executor) (*TenantPlan, error) {
	o := &TenantPlan{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for tenant_plan")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TenantPlan records from the query using the global executor.
func (q tenantPlanQuery) AllG() (TenantPlanSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all TenantPlan records from the query.
func (q tenantPlanQuery) All(exec boil.Executor) (TenantPlanSlice, error) {
	var o []*TenantPlan

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to TenantPlan slice")
	}

	if len(tenantPlanAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TenantPlan records in the query using the global executor
func (q tenantPlanQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all TenantPlan records in the query.
func (q tenantPlanQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count tenant_plan rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q tenantPlanQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q tenantPlanQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if tenant_plan exists")
	}

	return count > 0, nil
}

// Plan pointed to by the foreign key.
func (o *TenantPlan) Plan(mods ...qm.QueryMod) planQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlanID),
	}

	queryMods = append(queryMods, mods...)

	return Plans(queryMods...)
}

// Creator pointed to by the foreign key.
func (o *TenantPlan) Creator(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatorID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Tenant pointed to by the foreign key.
func (o *TenantPlan) Tenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TenantID),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// LoadPlan allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tenantPlanL) LoadPlan(e boil.Executor, singular bool, maybeTenantPlan interface{}, mods queries.Applicator) error {
	var slice []*TenantPlan
	var object *TenantPlan

	if singular {
		var ok bool
		object, ok = maybeTenantPlan.(*TenantPlan)
		if !ok {
			object = new(TenantPlan)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenantPlan)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenantPlan))
			}
		}
	} else {
		s, ok := maybeTenantPlan.(*[]*TenantPlan)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenantPlan)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenantPlan))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tenantPlanR{}
		}
		args[object.PlanID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantPlanR{}
			}

			args[obj.PlanID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`plans`),
		qm.WhereIn(`plans.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Plan")
	}

	var resultSlice []*Plan
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Plan")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for plans")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for plans")
	}

	if len(planAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Plan = foreign
		if foreign.R == nil {
			foreign.R = &planR{}
		}
		foreign.R.TenantPlans = append(foreign.R.TenantPlans, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlanID == foreign.ID {
				local.R.Plan = foreign
				if foreign.R == nil {
					foreign.R = &planR{}
				}
				foreign.R.TenantPlans = append(foreign.R.TenantPlans, local)
				break
			}
		}
	}

	return nil
}

// LoadCreator allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tenantPlanL) LoadCreator(e boil.Executor, singular bool, maybeTenantPlan interface{}, mods queries.Applicator) error {
	var slice []*TenantPlan
	var object *TenantPlan

	if singular {
		var ok bool
		object, ok = maybeTenantPlan.(*TenantPlan)
		if !ok {
			object = new(TenantPlan)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenantPlan)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenantPlan))
			}
		}
	} else {
		s, ok := maybeTenantPlan.(*[]*TenantPlan)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenantPlan)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenantPlan))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tenantPlanR{}
		}
		args[object.CreatorID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantPlanR{}
			}

			args[obj.CreatorID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Creator = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatorTenantPlan = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatorID == foreign.ID {
				local.R.Creator = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatorTenantPlan = local
				break
			}
		}
	}

	return nil
}

// LoadTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tenantPlanL) LoadTenant(e boil.Executor, singular bool, maybeTenantPlan interface{}, mods queries.Applicator) error {
	var slice []*TenantPlan
	var object *TenantPlan

	if singular {
		var ok bool
		object, ok = maybeTenantPlan.(*TenantPlan)
		if !ok {
			object = new(TenantPlan)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenantPlan)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenantPlan))
			}
		}
	} else {
		s, ok := maybeTenantPlan.(*[]*TenantPlan)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenantPlan)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenantPlan))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tenantPlanR{}
		}
		args[object.TenantID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantPlanR{}
			}

			args[obj.TenantID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.TenantPlan = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TenantID == foreign.ID {
				local.R.Tenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.TenantPlan = local
				break
			}
		}
	}

	return nil
}

// SetPlanG of the tenantPlan to the related item.
// Sets o.R.Plan to related.
// Adds o to related.R.TenantPlans.
// Uses the global database handle.
func (o *TenantPlan) SetPlanG(insert bool, related *Plan) error {
	return o.SetPlan(boil.GetDB(), insert, related)
}

// SetPlan of the tenantPlan to the related item.
// Sets o.R.Plan to related.
// Adds o to related.R.TenantPlans.
func (o *TenantPlan) SetPlan(exec boil.Executor, insert bool, related *Plan) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tenant_plan\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"plan_id"}),
		strmangle.WhereClause("\"", "\"", 2, tenantPlanPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.TenantID, o.PlanID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlanID = related.ID
	if o.R == nil {
		o.R = &tenantPlanR{
			Plan: related,
		}
	} else {
		o.R.Plan = related
	}

	if related.R == nil {
		related.R = &planR{
			TenantPlans: TenantPlanSlice{o},
		}
	} else {
		related.R.TenantPlans = append(related.R.TenantPlans, o)
	}

	return nil
}

// SetCreatorG of the tenantPlan to the related item.
// Sets o.R.Creator to related.
// Adds o to related.R.CreatorTenantPlan.
// Uses the global database handle.
func (o *TenantPlan) SetCreatorG(insert bool, related *User) error {
	return o.SetCreator(boil.GetDB(), insert, related)
}

// SetCreator of the tenantPlan to the related item.
// Sets o.R.Creator to related.
// Adds o to related.R.CreatorTenantPlan.
func (o *TenantPlan) SetCreator(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tenant_plan\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"creator_id"}),
		strmangle.WhereClause("\"", "\"", 2, tenantPlanPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.TenantID, o.PlanID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatorID = related.ID
	if o.R == nil {
		o.R = &tenantPlanR{
			Creator: related,
		}
	} else {
		o.R.Creator = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatorTenantPlan: o,
		}
	} else {
		related.R.CreatorTenantPlan = o
	}

	return nil
}

// SetTenantG of the tenantPlan to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.TenantPlan.
// Uses the global database handle.
func (o *TenantPlan) SetTenantG(insert bool, related *Tenant) error {
	return o.SetTenant(boil.GetDB(), insert, related)
}

// SetTenant of the tenantPlan to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.TenantPlan.
func (o *TenantPlan) SetTenant(exec boil.Executor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tenant_plan\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
		strmangle.WhereClause("\"", "\"", 2, tenantPlanPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.TenantID, o.PlanID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TenantID = related.ID
	if o.R == nil {
		o.R = &tenantPlanR{
			Tenant: related,
		}
	} else {
		o.R.Tenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			TenantPlan: o,
		}
	} else {
		related.R.TenantPlan = o
	}

	return nil
}

// TenantPlans retrieves all the records using an executor.
func TenantPlans(mods ...qm.QueryMod) tenantPlanQuery {
	mods = append(mods, qm.From("\"tenant_plan\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tenant_plan\".*"})
	}

	return tenantPlanQuery{q}
}

// FindTenantPlanG retrieves a single record by ID.
func FindTenantPlanG(tenantID int64, planID int64, selectCols ...string) (*TenantPlan, error) {
	return FindTenantPlan(boil.GetDB(), tenantID, planID, selectCols...)
}

// FindTenantPlan retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTenantPlan(exec boil.Executor, tenantID int64, planID int64, selectCols ...string) (*TenantPlan, error) {
	tenantPlanObj := &TenantPlan{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tenant_plan\" where \"tenant_id\"=$1 AND \"plan_id\"=$2", sel,
	)

	q := queries.Raw(query, tenantID, planID)

	err := q.Bind(nil, exec, tenantPlanObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from tenant_plan")
	}

	if err = tenantPlanObj.doAfterSelectHooks(exec); err != nil {
		return tenantPlanObj, err
	}

	return tenantPlanObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TenantPlan) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TenantPlan) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no tenant_plan provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tenantPlanColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tenantPlanInsertCacheMut.RLock()
	cache, cached := tenantPlanInsertCache[key]
	tenantPlanInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tenantPlanAllColumns,
			tenantPlanColumnsWithDefault,
			tenantPlanColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tenantPlanType, tenantPlanMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tenantPlanType, tenantPlanMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tenant_plan\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tenant_plan\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into tenant_plan")
	}

	if !cached {
		tenantPlanInsertCacheMut.Lock()
		tenantPlanInsertCache[key] = cache
		tenantPlanInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single TenantPlan record using the global executor.
// See Update for more documentation.
func (o *TenantPlan) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the TenantPlan.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TenantPlan) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tenantPlanUpdateCacheMut.RLock()
	cache, cached := tenantPlanUpdateCache[key]
	tenantPlanUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tenantPlanAllColumns,
			tenantPlanPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update tenant_plan, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tenant_plan\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tenantPlanPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tenantPlanType, tenantPlanMapping, append(wl, tenantPlanPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update tenant_plan row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for tenant_plan")
	}

	if !cached {
		tenantPlanUpdateCacheMut.Lock()
		tenantPlanUpdateCache[key] = cache
		tenantPlanUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q tenantPlanQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q tenantPlanQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for tenant_plan")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for tenant_plan")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TenantPlanSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TenantPlanSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantPlanPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tenant_plan\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tenantPlanPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in tenantPlan slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all tenantPlan")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TenantPlan) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TenantPlan) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no tenant_plan provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tenantPlanColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tenantPlanUpsertCacheMut.RLock()
	cache, cached := tenantPlanUpsertCache[key]
	tenantPlanUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			tenantPlanAllColumns,
			tenantPlanColumnsWithDefault,
			tenantPlanColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tenantPlanAllColumns,
			tenantPlanPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert tenant_plan, could not build update column list")
		}

		ret := strmangle.SetComplement(tenantPlanAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(tenantPlanPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert tenant_plan, could not build conflict column list")
			}

			conflict = make([]string, len(tenantPlanPrimaryKeyColumns))
			copy(conflict, tenantPlanPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tenant_plan\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(tenantPlanType, tenantPlanMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tenantPlanType, tenantPlanMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert tenant_plan")
	}

	if !cached {
		tenantPlanUpsertCacheMut.Lock()
		tenantPlanUpsertCache[key] = cache
		tenantPlanUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single TenantPlan record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TenantPlan) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single TenantPlan record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TenantPlan) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no TenantPlan provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tenantPlanPrimaryKeyMapping)
	sql := "DELETE FROM \"tenant_plan\" WHERE \"tenant_id\"=$1 AND \"plan_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from tenant_plan")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for tenant_plan")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q tenantPlanQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q tenantPlanQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no tenantPlanQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from tenant_plan")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for tenant_plan")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TenantPlanSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TenantPlanSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tenantPlanBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantPlanPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tenant_plan\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tenantPlanPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from tenantPlan slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for tenant_plan")
	}

	if len(tenantPlanAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TenantPlan) ReloadG() error {
	if o == nil {
		return errors.New("orm: no TenantPlan provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TenantPlan) Reload(exec boil.Executor) error {
	ret, err := FindTenantPlan(exec, o.TenantID, o.PlanID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TenantPlanSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("orm: empty TenantPlanSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TenantPlanSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TenantPlanSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantPlanPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tenant_plan\".* FROM \"tenant_plan\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tenantPlanPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in TenantPlanSlice")
	}

	*o = slice

	return nil
}

// TenantPlanExistsG checks if the TenantPlan row exists.
func TenantPlanExistsG(tenantID int64, planID int64) (bool, error) {
	return TenantPlanExists(boil.GetDB(), tenantID, planID)
}

// TenantPlanExists checks if the TenantPlan row exists.
func TenantPlanExists(exec boil.Executor, tenantID int64, planID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tenant_plan\" where \"tenant_id\"=$1 AND \"plan_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, tenantID, planID)
	}
	row := exec.QueryRow(sql, tenantID, planID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if tenant_plan exists")
	}

	return exists, nil
}

// Exists checks if the TenantPlan row exists.
func (o *TenantPlan) Exists(exec boil.Executor) (bool, error) {
	return TenantPlanExists(exec, o.TenantID, o.PlanID)
}
