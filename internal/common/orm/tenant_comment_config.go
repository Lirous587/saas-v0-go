// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// TenantCommentConfig is an object representing the database table.
type TenantCommentConfig struct {
	TenantID    int64     `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	IfAudit     bool      `boil:"if_audit" json:"if_audit" toml:"if_audit" yaml:"if_audit"`
	AllowAnon   bool      `boil:"allow_anon" json:"allow_anon" toml:"allow_anon" yaml:"allow_anon"`
	MaxComments null.Int  `boil:"max_comments" json:"max_comments,omitempty" toml:"max_comments" yaml:"max_comments,omitempty"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *tenantCommentConfigR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tenantCommentConfigL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TenantCommentConfigColumns = struct {
	TenantID    string
	IfAudit     string
	AllowAnon   string
	MaxComments string
	CreatedAt   string
	UpdatedAt   string
}{
	TenantID:    "tenant_id",
	IfAudit:     "if_audit",
	AllowAnon:   "allow_anon",
	MaxComments: "max_comments",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var TenantCommentConfigTableColumns = struct {
	TenantID    string
	IfAudit     string
	AllowAnon   string
	MaxComments string
	CreatedAt   string
	UpdatedAt   string
}{
	TenantID:    "tenant_comment_config.tenant_id",
	IfAudit:     "tenant_comment_config.if_audit",
	AllowAnon:   "tenant_comment_config.allow_anon",
	MaxComments: "tenant_comment_config.max_comments",
	CreatedAt:   "tenant_comment_config.created_at",
	UpdatedAt:   "tenant_comment_config.updated_at",
}

// Generated where

var TenantCommentConfigWhere = struct {
	TenantID    whereHelperint64
	IfAudit     whereHelperbool
	AllowAnon   whereHelperbool
	MaxComments whereHelpernull_Int
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	TenantID:    whereHelperint64{field: "\"tenant_comment_config\".\"tenant_id\""},
	IfAudit:     whereHelperbool{field: "\"tenant_comment_config\".\"if_audit\""},
	AllowAnon:   whereHelperbool{field: "\"tenant_comment_config\".\"allow_anon\""},
	MaxComments: whereHelpernull_Int{field: "\"tenant_comment_config\".\"max_comments\""},
	CreatedAt:   whereHelpertime_Time{field: "\"tenant_comment_config\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"tenant_comment_config\".\"updated_at\""},
}

// TenantCommentConfigRels is where relationship names are stored.
var TenantCommentConfigRels = struct {
	Tenant string
}{
	Tenant: "Tenant",
}

// tenantCommentConfigR is where relationships are stored.
type tenantCommentConfigR struct {
	Tenant *Tenant `boil:"Tenant" json:"Tenant" toml:"Tenant" yaml:"Tenant"`
}

// NewStruct creates a new relationship struct
func (*tenantCommentConfigR) NewStruct() *tenantCommentConfigR {
	return &tenantCommentConfigR{}
}

func (o *TenantCommentConfig) GetTenant() *Tenant {
	if o == nil {
		return nil
	}

	return o.R.GetTenant()
}

func (r *tenantCommentConfigR) GetTenant() *Tenant {
	if r == nil {
		return nil
	}

	return r.Tenant
}

// tenantCommentConfigL is where Load methods for each relationship are stored.
type tenantCommentConfigL struct{}

var (
	tenantCommentConfigAllColumns            = []string{"tenant_id", "if_audit", "allow_anon", "max_comments", "created_at", "updated_at"}
	tenantCommentConfigColumnsWithoutDefault = []string{"tenant_id"}
	tenantCommentConfigColumnsWithDefault    = []string{"if_audit", "allow_anon", "max_comments", "created_at", "updated_at"}
	tenantCommentConfigPrimaryKeyColumns     = []string{"tenant_id"}
	tenantCommentConfigGeneratedColumns      = []string{}
)

type (
	// TenantCommentConfigSlice is an alias for a slice of pointers to TenantCommentConfig.
	// This should almost always be used instead of []TenantCommentConfig.
	TenantCommentConfigSlice []*TenantCommentConfig
	// TenantCommentConfigHook is the signature for custom TenantCommentConfig hook methods
	TenantCommentConfigHook func(boil.Executor, *TenantCommentConfig) error

	tenantCommentConfigQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tenantCommentConfigType                 = reflect.TypeOf(&TenantCommentConfig{})
	tenantCommentConfigMapping              = queries.MakeStructMapping(tenantCommentConfigType)
	tenantCommentConfigPrimaryKeyMapping, _ = queries.BindMapping(tenantCommentConfigType, tenantCommentConfigMapping, tenantCommentConfigPrimaryKeyColumns)
	tenantCommentConfigInsertCacheMut       sync.RWMutex
	tenantCommentConfigInsertCache          = make(map[string]insertCache)
	tenantCommentConfigUpdateCacheMut       sync.RWMutex
	tenantCommentConfigUpdateCache          = make(map[string]updateCache)
	tenantCommentConfigUpsertCacheMut       sync.RWMutex
	tenantCommentConfigUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tenantCommentConfigAfterSelectMu sync.Mutex
var tenantCommentConfigAfterSelectHooks []TenantCommentConfigHook

var tenantCommentConfigBeforeInsertMu sync.Mutex
var tenantCommentConfigBeforeInsertHooks []TenantCommentConfigHook
var tenantCommentConfigAfterInsertMu sync.Mutex
var tenantCommentConfigAfterInsertHooks []TenantCommentConfigHook

var tenantCommentConfigBeforeUpdateMu sync.Mutex
var tenantCommentConfigBeforeUpdateHooks []TenantCommentConfigHook
var tenantCommentConfigAfterUpdateMu sync.Mutex
var tenantCommentConfigAfterUpdateHooks []TenantCommentConfigHook

var tenantCommentConfigBeforeDeleteMu sync.Mutex
var tenantCommentConfigBeforeDeleteHooks []TenantCommentConfigHook
var tenantCommentConfigAfterDeleteMu sync.Mutex
var tenantCommentConfigAfterDeleteHooks []TenantCommentConfigHook

var tenantCommentConfigBeforeUpsertMu sync.Mutex
var tenantCommentConfigBeforeUpsertHooks []TenantCommentConfigHook
var tenantCommentConfigAfterUpsertMu sync.Mutex
var tenantCommentConfigAfterUpsertHooks []TenantCommentConfigHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TenantCommentConfig) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantCommentConfigAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TenantCommentConfig) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantCommentConfigBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TenantCommentConfig) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantCommentConfigAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TenantCommentConfig) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantCommentConfigBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TenantCommentConfig) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantCommentConfigAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TenantCommentConfig) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantCommentConfigBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TenantCommentConfig) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantCommentConfigAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TenantCommentConfig) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantCommentConfigBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TenantCommentConfig) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantCommentConfigAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTenantCommentConfigHook registers your hook function for all future operations.
func AddTenantCommentConfigHook(hookPoint boil.HookPoint, tenantCommentConfigHook TenantCommentConfigHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tenantCommentConfigAfterSelectMu.Lock()
		tenantCommentConfigAfterSelectHooks = append(tenantCommentConfigAfterSelectHooks, tenantCommentConfigHook)
		tenantCommentConfigAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		tenantCommentConfigBeforeInsertMu.Lock()
		tenantCommentConfigBeforeInsertHooks = append(tenantCommentConfigBeforeInsertHooks, tenantCommentConfigHook)
		tenantCommentConfigBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		tenantCommentConfigAfterInsertMu.Lock()
		tenantCommentConfigAfterInsertHooks = append(tenantCommentConfigAfterInsertHooks, tenantCommentConfigHook)
		tenantCommentConfigAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		tenantCommentConfigBeforeUpdateMu.Lock()
		tenantCommentConfigBeforeUpdateHooks = append(tenantCommentConfigBeforeUpdateHooks, tenantCommentConfigHook)
		tenantCommentConfigBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		tenantCommentConfigAfterUpdateMu.Lock()
		tenantCommentConfigAfterUpdateHooks = append(tenantCommentConfigAfterUpdateHooks, tenantCommentConfigHook)
		tenantCommentConfigAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		tenantCommentConfigBeforeDeleteMu.Lock()
		tenantCommentConfigBeforeDeleteHooks = append(tenantCommentConfigBeforeDeleteHooks, tenantCommentConfigHook)
		tenantCommentConfigBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		tenantCommentConfigAfterDeleteMu.Lock()
		tenantCommentConfigAfterDeleteHooks = append(tenantCommentConfigAfterDeleteHooks, tenantCommentConfigHook)
		tenantCommentConfigAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		tenantCommentConfigBeforeUpsertMu.Lock()
		tenantCommentConfigBeforeUpsertHooks = append(tenantCommentConfigBeforeUpsertHooks, tenantCommentConfigHook)
		tenantCommentConfigBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		tenantCommentConfigAfterUpsertMu.Lock()
		tenantCommentConfigAfterUpsertHooks = append(tenantCommentConfigAfterUpsertHooks, tenantCommentConfigHook)
		tenantCommentConfigAfterUpsertMu.Unlock()
	}
}

// OneG returns a single tenantCommentConfig record from the query using the global executor.
func (q tenantCommentConfigQuery) OneG() (*TenantCommentConfig, error) {
	return q.One(boil.GetDB())
}

// One returns a single tenantCommentConfig record from the query.
func (q tenantCommentConfigQuery) One(exec boil.Executor) (*TenantCommentConfig, error) {
	o := &TenantCommentConfig{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for tenant_comment_config")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TenantCommentConfig records from the query using the global executor.
func (q tenantCommentConfigQuery) AllG() (TenantCommentConfigSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all TenantCommentConfig records from the query.
func (q tenantCommentConfigQuery) All(exec boil.Executor) (TenantCommentConfigSlice, error) {
	var o []*TenantCommentConfig

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to TenantCommentConfig slice")
	}

	if len(tenantCommentConfigAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TenantCommentConfig records in the query using the global executor
func (q tenantCommentConfigQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all TenantCommentConfig records in the query.
func (q tenantCommentConfigQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count tenant_comment_config rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q tenantCommentConfigQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q tenantCommentConfigQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if tenant_comment_config exists")
	}

	return count > 0, nil
}

// Tenant pointed to by the foreign key.
func (o *TenantCommentConfig) Tenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TenantID),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// LoadTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tenantCommentConfigL) LoadTenant(e boil.Executor, singular bool, maybeTenantCommentConfig interface{}, mods queries.Applicator) error {
	var slice []*TenantCommentConfig
	var object *TenantCommentConfig

	if singular {
		var ok bool
		object, ok = maybeTenantCommentConfig.(*TenantCommentConfig)
		if !ok {
			object = new(TenantCommentConfig)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenantCommentConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenantCommentConfig))
			}
		}
	} else {
		s, ok := maybeTenantCommentConfig.(*[]*TenantCommentConfig)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenantCommentConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenantCommentConfig))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tenantCommentConfigR{}
		}
		args[object.TenantID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantCommentConfigR{}
			}

			args[obj.TenantID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.TenantCommentConfig = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TenantID == foreign.ID {
				local.R.Tenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.TenantCommentConfig = local
				break
			}
		}
	}

	return nil
}

// SetTenantG of the tenantCommentConfig to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.TenantCommentConfig.
// Uses the global database handle.
func (o *TenantCommentConfig) SetTenantG(insert bool, related *Tenant) error {
	return o.SetTenant(boil.GetDB(), insert, related)
}

// SetTenant of the tenantCommentConfig to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.TenantCommentConfig.
func (o *TenantCommentConfig) SetTenant(exec boil.Executor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tenant_comment_config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
		strmangle.WhereClause("\"", "\"", 2, tenantCommentConfigPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.TenantID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TenantID = related.ID
	if o.R == nil {
		o.R = &tenantCommentConfigR{
			Tenant: related,
		}
	} else {
		o.R.Tenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			TenantCommentConfig: o,
		}
	} else {
		related.R.TenantCommentConfig = o
	}

	return nil
}

// TenantCommentConfigs retrieves all the records using an executor.
func TenantCommentConfigs(mods ...qm.QueryMod) tenantCommentConfigQuery {
	mods = append(mods, qm.From("\"tenant_comment_config\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tenant_comment_config\".*"})
	}

	return tenantCommentConfigQuery{q}
}

// FindTenantCommentConfigG retrieves a single record by ID.
func FindTenantCommentConfigG(tenantID int64, selectCols ...string) (*TenantCommentConfig, error) {
	return FindTenantCommentConfig(boil.GetDB(), tenantID, selectCols...)
}

// FindTenantCommentConfig retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTenantCommentConfig(exec boil.Executor, tenantID int64, selectCols ...string) (*TenantCommentConfig, error) {
	tenantCommentConfigObj := &TenantCommentConfig{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tenant_comment_config\" where \"tenant_id\"=$1", sel,
	)

	q := queries.Raw(query, tenantID)

	err := q.Bind(nil, exec, tenantCommentConfigObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from tenant_comment_config")
	}

	if err = tenantCommentConfigObj.doAfterSelectHooks(exec); err != nil {
		return tenantCommentConfigObj, err
	}

	return tenantCommentConfigObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TenantCommentConfig) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TenantCommentConfig) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no tenant_comment_config provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tenantCommentConfigColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tenantCommentConfigInsertCacheMut.RLock()
	cache, cached := tenantCommentConfigInsertCache[key]
	tenantCommentConfigInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tenantCommentConfigAllColumns,
			tenantCommentConfigColumnsWithDefault,
			tenantCommentConfigColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tenantCommentConfigType, tenantCommentConfigMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tenantCommentConfigType, tenantCommentConfigMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tenant_comment_config\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tenant_comment_config\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into tenant_comment_config")
	}

	if !cached {
		tenantCommentConfigInsertCacheMut.Lock()
		tenantCommentConfigInsertCache[key] = cache
		tenantCommentConfigInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single TenantCommentConfig record using the global executor.
// See Update for more documentation.
func (o *TenantCommentConfig) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the TenantCommentConfig.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TenantCommentConfig) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tenantCommentConfigUpdateCacheMut.RLock()
	cache, cached := tenantCommentConfigUpdateCache[key]
	tenantCommentConfigUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tenantCommentConfigAllColumns,
			tenantCommentConfigPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update tenant_comment_config, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tenant_comment_config\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tenantCommentConfigPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tenantCommentConfigType, tenantCommentConfigMapping, append(wl, tenantCommentConfigPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update tenant_comment_config row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for tenant_comment_config")
	}

	if !cached {
		tenantCommentConfigUpdateCacheMut.Lock()
		tenantCommentConfigUpdateCache[key] = cache
		tenantCommentConfigUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q tenantCommentConfigQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q tenantCommentConfigQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for tenant_comment_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for tenant_comment_config")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TenantCommentConfigSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TenantCommentConfigSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantCommentConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tenant_comment_config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tenantCommentConfigPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in tenantCommentConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all tenantCommentConfig")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TenantCommentConfig) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TenantCommentConfig) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no tenant_comment_config provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tenantCommentConfigColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tenantCommentConfigUpsertCacheMut.RLock()
	cache, cached := tenantCommentConfigUpsertCache[key]
	tenantCommentConfigUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			tenantCommentConfigAllColumns,
			tenantCommentConfigColumnsWithDefault,
			tenantCommentConfigColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tenantCommentConfigAllColumns,
			tenantCommentConfigPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert tenant_comment_config, could not build update column list")
		}

		ret := strmangle.SetComplement(tenantCommentConfigAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(tenantCommentConfigPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert tenant_comment_config, could not build conflict column list")
			}

			conflict = make([]string, len(tenantCommentConfigPrimaryKeyColumns))
			copy(conflict, tenantCommentConfigPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tenant_comment_config\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(tenantCommentConfigType, tenantCommentConfigMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tenantCommentConfigType, tenantCommentConfigMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert tenant_comment_config")
	}

	if !cached {
		tenantCommentConfigUpsertCacheMut.Lock()
		tenantCommentConfigUpsertCache[key] = cache
		tenantCommentConfigUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single TenantCommentConfig record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TenantCommentConfig) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single TenantCommentConfig record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TenantCommentConfig) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no TenantCommentConfig provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tenantCommentConfigPrimaryKeyMapping)
	sql := "DELETE FROM \"tenant_comment_config\" WHERE \"tenant_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from tenant_comment_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for tenant_comment_config")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q tenantCommentConfigQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q tenantCommentConfigQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no tenantCommentConfigQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from tenant_comment_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for tenant_comment_config")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TenantCommentConfigSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TenantCommentConfigSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tenantCommentConfigBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantCommentConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tenant_comment_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tenantCommentConfigPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from tenantCommentConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for tenant_comment_config")
	}

	if len(tenantCommentConfigAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TenantCommentConfig) ReloadG() error {
	if o == nil {
		return errors.New("orm: no TenantCommentConfig provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TenantCommentConfig) Reload(exec boil.Executor) error {
	ret, err := FindTenantCommentConfig(exec, o.TenantID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TenantCommentConfigSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("orm: empty TenantCommentConfigSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TenantCommentConfigSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TenantCommentConfigSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantCommentConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tenant_comment_config\".* FROM \"tenant_comment_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tenantCommentConfigPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in TenantCommentConfigSlice")
	}

	*o = slice

	return nil
}

// TenantCommentConfigExistsG checks if the TenantCommentConfig row exists.
func TenantCommentConfigExistsG(tenantID int64) (bool, error) {
	return TenantCommentConfigExists(boil.GetDB(), tenantID)
}

// TenantCommentConfigExists checks if the TenantCommentConfig row exists.
func TenantCommentConfigExists(exec boil.Executor, tenantID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tenant_comment_config\" where \"tenant_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, tenantID)
	}
	row := exec.QueryRow(sql, tenantID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if tenant_comment_config exists")
	}

	return exists, nil
}

// Exists checks if the TenantCommentConfig row exists.
func (o *TenantCommentConfig) Exists(exec boil.Executor) (bool, error) {
	return TenantCommentConfigExists(exec, o.TenantID)
}
