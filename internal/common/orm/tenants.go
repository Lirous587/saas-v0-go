// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Tenant is an object representing the database table.
type Tenant struct {
	ID           int64                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name         string                `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt    time.Time             `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time             `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Description  null.String           `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	CreatorID    int64                 `boil:"creator_id" json:"creator_id" toml:"creator_id" yaml:"creator_id"`
	Status       TenantStatus          `boil:"status" json:"status" toml:"status" yaml:"status"`
	BillingCycle TnantPlanBillingCycle `boil:"billing_cycle" json:"billing_cycle" toml:"billing_cycle" yaml:"billing_cycle"`
	StartAt      time.Time             `boil:"start_at" json:"start_at" toml:"start_at" yaml:"start_at"`
	EndAt        null.Time             `boil:"end_at" json:"end_at,omitempty" toml:"end_at" yaml:"end_at,omitempty"`
	PlanType     TenantPlanType        `boil:"plan_type" json:"plan_type" toml:"plan_type" yaml:"plan_type"`

	R *tenantR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tenantL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TenantColumns = struct {
	ID           string
	Name         string
	CreatedAt    string
	UpdatedAt    string
	Description  string
	CreatorID    string
	Status       string
	BillingCycle string
	StartAt      string
	EndAt        string
	PlanType     string
}{
	ID:           "id",
	Name:         "name",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	Description:  "description",
	CreatorID:    "creator_id",
	Status:       "status",
	BillingCycle: "billing_cycle",
	StartAt:      "start_at",
	EndAt:        "end_at",
	PlanType:     "plan_type",
}

var TenantTableColumns = struct {
	ID           string
	Name         string
	CreatedAt    string
	UpdatedAt    string
	Description  string
	CreatorID    string
	Status       string
	BillingCycle string
	StartAt      string
	EndAt        string
	PlanType     string
}{
	ID:           "tenants.id",
	Name:         "tenants.name",
	CreatedAt:    "tenants.created_at",
	UpdatedAt:    "tenants.updated_at",
	Description:  "tenants.description",
	CreatorID:    "tenants.creator_id",
	Status:       "tenants.status",
	BillingCycle: "tenants.billing_cycle",
	StartAt:      "tenants.start_at",
	EndAt:        "tenants.end_at",
	PlanType:     "tenants.plan_type",
}

// Generated where

type whereHelperTenantStatus struct{ field string }

func (w whereHelperTenantStatus) EQ(x TenantStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperTenantStatus) NEQ(x TenantStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperTenantStatus) LT(x TenantStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperTenantStatus) LTE(x TenantStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperTenantStatus) GT(x TenantStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperTenantStatus) GTE(x TenantStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperTenantStatus) IN(slice []TenantStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperTenantStatus) NIN(slice []TenantStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperTnantPlanBillingCycle struct{ field string }

func (w whereHelperTnantPlanBillingCycle) EQ(x TnantPlanBillingCycle) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperTnantPlanBillingCycle) NEQ(x TnantPlanBillingCycle) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperTnantPlanBillingCycle) LT(x TnantPlanBillingCycle) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperTnantPlanBillingCycle) LTE(x TnantPlanBillingCycle) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperTnantPlanBillingCycle) GT(x TnantPlanBillingCycle) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperTnantPlanBillingCycle) GTE(x TnantPlanBillingCycle) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperTnantPlanBillingCycle) IN(slice []TnantPlanBillingCycle) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperTnantPlanBillingCycle) NIN(slice []TnantPlanBillingCycle) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperTenantPlanType struct{ field string }

func (w whereHelperTenantPlanType) EQ(x TenantPlanType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperTenantPlanType) NEQ(x TenantPlanType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperTenantPlanType) LT(x TenantPlanType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperTenantPlanType) LTE(x TenantPlanType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperTenantPlanType) GT(x TenantPlanType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperTenantPlanType) GTE(x TenantPlanType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperTenantPlanType) IN(slice []TenantPlanType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperTenantPlanType) NIN(slice []TenantPlanType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var TenantWhere = struct {
	ID           whereHelperint64
	Name         whereHelperstring
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	Description  whereHelpernull_String
	CreatorID    whereHelperint64
	Status       whereHelperTenantStatus
	BillingCycle whereHelperTnantPlanBillingCycle
	StartAt      whereHelpertime_Time
	EndAt        whereHelpernull_Time
	PlanType     whereHelperTenantPlanType
}{
	ID:           whereHelperint64{field: "\"tenants\".\"id\""},
	Name:         whereHelperstring{field: "\"tenants\".\"name\""},
	CreatedAt:    whereHelpertime_Time{field: "\"tenants\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"tenants\".\"updated_at\""},
	Description:  whereHelpernull_String{field: "\"tenants\".\"description\""},
	CreatorID:    whereHelperint64{field: "\"tenants\".\"creator_id\""},
	Status:       whereHelperTenantStatus{field: "\"tenants\".\"status\""},
	BillingCycle: whereHelperTnantPlanBillingCycle{field: "\"tenants\".\"billing_cycle\""},
	StartAt:      whereHelpertime_Time{field: "\"tenants\".\"start_at\""},
	EndAt:        whereHelpernull_Time{field: "\"tenants\".\"end_at\""},
	PlanType:     whereHelperTenantPlanType{field: "\"tenants\".\"plan_type\""},
}

// TenantRels is where relationship names are stored.
var TenantRels = struct {
	Creator             string
	CommentTenantConfig string
	TenantR2Config      string
	CommentPlateConfigs string
	CommentPlates       string
	Comments            string
	ImgCategories       string
	Imgs                string
}{
	Creator:             "Creator",
	CommentTenantConfig: "CommentTenantConfig",
	TenantR2Config:      "TenantR2Config",
	CommentPlateConfigs: "CommentPlateConfigs",
	CommentPlates:       "CommentPlates",
	Comments:            "Comments",
	ImgCategories:       "ImgCategories",
	Imgs:                "Imgs",
}

// tenantR is where relationships are stored.
type tenantR struct {
	Creator             *User                   `boil:"Creator" json:"Creator" toml:"Creator" yaml:"Creator"`
	CommentTenantConfig *CommentTenantConfig    `boil:"CommentTenantConfig" json:"CommentTenantConfig" toml:"CommentTenantConfig" yaml:"CommentTenantConfig"`
	TenantR2Config      *TenantR2Config         `boil:"TenantR2Config" json:"TenantR2Config" toml:"TenantR2Config" yaml:"TenantR2Config"`
	CommentPlateConfigs CommentPlateConfigSlice `boil:"CommentPlateConfigs" json:"CommentPlateConfigs" toml:"CommentPlateConfigs" yaml:"CommentPlateConfigs"`
	CommentPlates       CommentPlateSlice       `boil:"CommentPlates" json:"CommentPlates" toml:"CommentPlates" yaml:"CommentPlates"`
	Comments            CommentSlice            `boil:"Comments" json:"Comments" toml:"Comments" yaml:"Comments"`
	ImgCategories       ImgCategorySlice        `boil:"ImgCategories" json:"ImgCategories" toml:"ImgCategories" yaml:"ImgCategories"`
	Imgs                ImgSlice                `boil:"Imgs" json:"Imgs" toml:"Imgs" yaml:"Imgs"`
}

// NewStruct creates a new relationship struct
func (*tenantR) NewStruct() *tenantR {
	return &tenantR{}
}

func (o *Tenant) GetCreator() *User {
	if o == nil {
		return nil
	}

	return o.R.GetCreator()
}

func (r *tenantR) GetCreator() *User {
	if r == nil {
		return nil
	}

	return r.Creator
}

func (o *Tenant) GetCommentTenantConfig() *CommentTenantConfig {
	if o == nil {
		return nil
	}

	return o.R.GetCommentTenantConfig()
}

func (r *tenantR) GetCommentTenantConfig() *CommentTenantConfig {
	if r == nil {
		return nil
	}

	return r.CommentTenantConfig
}

func (o *Tenant) GetTenantR2Config() *TenantR2Config {
	if o == nil {
		return nil
	}

	return o.R.GetTenantR2Config()
}

func (r *tenantR) GetTenantR2Config() *TenantR2Config {
	if r == nil {
		return nil
	}

	return r.TenantR2Config
}

func (o *Tenant) GetCommentPlateConfigs() CommentPlateConfigSlice {
	if o == nil {
		return nil
	}

	return o.R.GetCommentPlateConfigs()
}

func (r *tenantR) GetCommentPlateConfigs() CommentPlateConfigSlice {
	if r == nil {
		return nil
	}

	return r.CommentPlateConfigs
}

func (o *Tenant) GetCommentPlates() CommentPlateSlice {
	if o == nil {
		return nil
	}

	return o.R.GetCommentPlates()
}

func (r *tenantR) GetCommentPlates() CommentPlateSlice {
	if r == nil {
		return nil
	}

	return r.CommentPlates
}

func (o *Tenant) GetComments() CommentSlice {
	if o == nil {
		return nil
	}

	return o.R.GetComments()
}

func (r *tenantR) GetComments() CommentSlice {
	if r == nil {
		return nil
	}

	return r.Comments
}

func (o *Tenant) GetImgCategories() ImgCategorySlice {
	if o == nil {
		return nil
	}

	return o.R.GetImgCategories()
}

func (r *tenantR) GetImgCategories() ImgCategorySlice {
	if r == nil {
		return nil
	}

	return r.ImgCategories
}

func (o *Tenant) GetImgs() ImgSlice {
	if o == nil {
		return nil
	}

	return o.R.GetImgs()
}

func (r *tenantR) GetImgs() ImgSlice {
	if r == nil {
		return nil
	}

	return r.Imgs
}

// tenantL is where Load methods for each relationship are stored.
type tenantL struct{}

var (
	tenantAllColumns            = []string{"id", "name", "created_at", "updated_at", "description", "creator_id", "status", "billing_cycle", "start_at", "end_at", "plan_type"}
	tenantColumnsWithoutDefault = []string{"name", "creator_id"}
	tenantColumnsWithDefault    = []string{"id", "created_at", "updated_at", "description", "status", "billing_cycle", "start_at", "end_at", "plan_type"}
	tenantPrimaryKeyColumns     = []string{"id"}
	tenantGeneratedColumns      = []string{}
)

type (
	// TenantSlice is an alias for a slice of pointers to Tenant.
	// This should almost always be used instead of []Tenant.
	TenantSlice []*Tenant
	// TenantHook is the signature for custom Tenant hook methods
	TenantHook func(boil.Executor, *Tenant) error

	tenantQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tenantType                 = reflect.TypeOf(&Tenant{})
	tenantMapping              = queries.MakeStructMapping(tenantType)
	tenantPrimaryKeyMapping, _ = queries.BindMapping(tenantType, tenantMapping, tenantPrimaryKeyColumns)
	tenantInsertCacheMut       sync.RWMutex
	tenantInsertCache          = make(map[string]insertCache)
	tenantUpdateCacheMut       sync.RWMutex
	tenantUpdateCache          = make(map[string]updateCache)
	tenantUpsertCacheMut       sync.RWMutex
	tenantUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tenantAfterSelectMu sync.Mutex
var tenantAfterSelectHooks []TenantHook

var tenantBeforeInsertMu sync.Mutex
var tenantBeforeInsertHooks []TenantHook
var tenantAfterInsertMu sync.Mutex
var tenantAfterInsertHooks []TenantHook

var tenantBeforeUpdateMu sync.Mutex
var tenantBeforeUpdateHooks []TenantHook
var tenantAfterUpdateMu sync.Mutex
var tenantAfterUpdateHooks []TenantHook

var tenantBeforeDeleteMu sync.Mutex
var tenantBeforeDeleteHooks []TenantHook
var tenantAfterDeleteMu sync.Mutex
var tenantAfterDeleteHooks []TenantHook

var tenantBeforeUpsertMu sync.Mutex
var tenantBeforeUpsertHooks []TenantHook
var tenantAfterUpsertMu sync.Mutex
var tenantAfterUpsertHooks []TenantHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Tenant) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Tenant) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Tenant) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Tenant) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Tenant) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Tenant) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Tenant) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Tenant) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Tenant) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTenantHook registers your hook function for all future operations.
func AddTenantHook(hookPoint boil.HookPoint, tenantHook TenantHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tenantAfterSelectMu.Lock()
		tenantAfterSelectHooks = append(tenantAfterSelectHooks, tenantHook)
		tenantAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		tenantBeforeInsertMu.Lock()
		tenantBeforeInsertHooks = append(tenantBeforeInsertHooks, tenantHook)
		tenantBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		tenantAfterInsertMu.Lock()
		tenantAfterInsertHooks = append(tenantAfterInsertHooks, tenantHook)
		tenantAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		tenantBeforeUpdateMu.Lock()
		tenantBeforeUpdateHooks = append(tenantBeforeUpdateHooks, tenantHook)
		tenantBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		tenantAfterUpdateMu.Lock()
		tenantAfterUpdateHooks = append(tenantAfterUpdateHooks, tenantHook)
		tenantAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		tenantBeforeDeleteMu.Lock()
		tenantBeforeDeleteHooks = append(tenantBeforeDeleteHooks, tenantHook)
		tenantBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		tenantAfterDeleteMu.Lock()
		tenantAfterDeleteHooks = append(tenantAfterDeleteHooks, tenantHook)
		tenantAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		tenantBeforeUpsertMu.Lock()
		tenantBeforeUpsertHooks = append(tenantBeforeUpsertHooks, tenantHook)
		tenantBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		tenantAfterUpsertMu.Lock()
		tenantAfterUpsertHooks = append(tenantAfterUpsertHooks, tenantHook)
		tenantAfterUpsertMu.Unlock()
	}
}

// OneG returns a single tenant record from the query using the global executor.
func (q tenantQuery) OneG() (*Tenant, error) {
	return q.One(boil.GetDB())
}

// One returns a single tenant record from the query.
func (q tenantQuery) One(exec boil.Executor) (*Tenant, error) {
	o := &Tenant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for tenants")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Tenant records from the query using the global executor.
func (q tenantQuery) AllG() (TenantSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Tenant records from the query.
func (q tenantQuery) All(exec boil.Executor) (TenantSlice, error) {
	var o []*Tenant

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Tenant slice")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Tenant records in the query using the global executor
func (q tenantQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Tenant records in the query.
func (q tenantQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count tenants rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q tenantQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q tenantQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if tenants exists")
	}

	return count > 0, nil
}

// Creator pointed to by the foreign key.
func (o *Tenant) Creator(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatorID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// CommentTenantConfig pointed to by the foreign key.
func (o *Tenant) CommentTenantConfig(mods ...qm.QueryMod) commentTenantConfigQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"tenant_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return CommentTenantConfigs(queryMods...)
}

// TenantR2Config pointed to by the foreign key.
func (o *Tenant) TenantR2Config(mods ...qm.QueryMod) tenantR2ConfigQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"tenant_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return TenantR2Configs(queryMods...)
}

// CommentPlateConfigs retrieves all the comment_plate_config's CommentPlateConfigs with an executor.
func (o *Tenant) CommentPlateConfigs(mods ...qm.QueryMod) commentPlateConfigQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"comment_plate_configs\".\"tenant_id\"=?", o.ID),
	)

	return CommentPlateConfigs(queryMods...)
}

// CommentPlates retrieves all the comment_plate's CommentPlates with an executor.
func (o *Tenant) CommentPlates(mods ...qm.QueryMod) commentPlateQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"comment_plates\".\"tenant_id\"=?", o.ID),
	)

	return CommentPlates(queryMods...)
}

// Comments retrieves all the comment's Comments with an executor.
func (o *Tenant) Comments(mods ...qm.QueryMod) commentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"comments\".\"tenant_id\"=?", o.ID),
	)

	return Comments(queryMods...)
}

// ImgCategories retrieves all the img_category's ImgCategories with an executor.
func (o *Tenant) ImgCategories(mods ...qm.QueryMod) imgCategoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"img_categories\".\"tenant_id\"=?", o.ID),
	)

	return ImgCategories(queryMods...)
}

// Imgs retrieves all the img's Imgs with an executor.
func (o *Tenant) Imgs(mods ...qm.QueryMod) imgQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"imgs\".\"tenant_id\"=?", o.ID),
	)

	return Imgs(queryMods...)
}

// LoadCreator allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tenantL) LoadCreator(e boil.Executor, singular bool, maybeTenant interface{}, mods queries.Applicator) error {
	var slice []*Tenant
	var object *Tenant

	if singular {
		var ok bool
		object, ok = maybeTenant.(*Tenant)
		if !ok {
			object = new(Tenant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenant))
			}
		}
	} else {
		s, ok := maybeTenant.(*[]*Tenant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenant))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tenantR{}
		}
		args[object.CreatorID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantR{}
			}

			args[obj.CreatorID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Creator = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatorTenants = append(foreign.R.CreatorTenants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatorID == foreign.ID {
				local.R.Creator = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatorTenants = append(foreign.R.CreatorTenants, local)
				break
			}
		}
	}

	return nil
}

// LoadCommentTenantConfig allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (tenantL) LoadCommentTenantConfig(e boil.Executor, singular bool, maybeTenant interface{}, mods queries.Applicator) error {
	var slice []*Tenant
	var object *Tenant

	if singular {
		var ok bool
		object, ok = maybeTenant.(*Tenant)
		if !ok {
			object = new(Tenant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenant))
			}
		}
	} else {
		s, ok := maybeTenant.(*[]*Tenant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenant))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tenantR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`comment_tenant_configs`),
		qm.WhereIn(`comment_tenant_configs.tenant_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CommentTenantConfig")
	}

	var resultSlice []*CommentTenantConfig
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CommentTenantConfig")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for comment_tenant_configs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for comment_tenant_configs")
	}

	if len(commentTenantConfigAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CommentTenantConfig = foreign
		if foreign.R == nil {
			foreign.R = &commentTenantConfigR{}
		}
		foreign.R.Tenant = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.TenantID {
				local.R.CommentTenantConfig = foreign
				if foreign.R == nil {
					foreign.R = &commentTenantConfigR{}
				}
				foreign.R.Tenant = local
				break
			}
		}
	}

	return nil
}

// LoadTenantR2Config allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (tenantL) LoadTenantR2Config(e boil.Executor, singular bool, maybeTenant interface{}, mods queries.Applicator) error {
	var slice []*Tenant
	var object *Tenant

	if singular {
		var ok bool
		object, ok = maybeTenant.(*Tenant)
		if !ok {
			object = new(Tenant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenant))
			}
		}
	} else {
		s, ok := maybeTenant.(*[]*Tenant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenant))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tenantR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenant_r2_configs`),
		qm.WhereIn(`tenant_r2_configs.tenant_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TenantR2Config")
	}

	var resultSlice []*TenantR2Config
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TenantR2Config")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenant_r2_configs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenant_r2_configs")
	}

	if len(tenantR2ConfigAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TenantR2Config = foreign
		if foreign.R == nil {
			foreign.R = &tenantR2ConfigR{}
		}
		foreign.R.Tenant = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.TenantID {
				local.R.TenantR2Config = foreign
				if foreign.R == nil {
					foreign.R = &tenantR2ConfigR{}
				}
				foreign.R.Tenant = local
				break
			}
		}
	}

	return nil
}

// LoadCommentPlateConfigs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tenantL) LoadCommentPlateConfigs(e boil.Executor, singular bool, maybeTenant interface{}, mods queries.Applicator) error {
	var slice []*Tenant
	var object *Tenant

	if singular {
		var ok bool
		object, ok = maybeTenant.(*Tenant)
		if !ok {
			object = new(Tenant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenant))
			}
		}
	} else {
		s, ok := maybeTenant.(*[]*Tenant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenant))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tenantR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`comment_plate_configs`),
		qm.WhereIn(`comment_plate_configs.tenant_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load comment_plate_configs")
	}

	var resultSlice []*CommentPlateConfig
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice comment_plate_configs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on comment_plate_configs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for comment_plate_configs")
	}

	if len(commentPlateConfigAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CommentPlateConfigs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &commentPlateConfigR{}
			}
			foreign.R.Tenant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TenantID {
				local.R.CommentPlateConfigs = append(local.R.CommentPlateConfigs, foreign)
				if foreign.R == nil {
					foreign.R = &commentPlateConfigR{}
				}
				foreign.R.Tenant = local
				break
			}
		}
	}

	return nil
}

// LoadCommentPlates allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tenantL) LoadCommentPlates(e boil.Executor, singular bool, maybeTenant interface{}, mods queries.Applicator) error {
	var slice []*Tenant
	var object *Tenant

	if singular {
		var ok bool
		object, ok = maybeTenant.(*Tenant)
		if !ok {
			object = new(Tenant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenant))
			}
		}
	} else {
		s, ok := maybeTenant.(*[]*Tenant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenant))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tenantR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`comment_plates`),
		qm.WhereIn(`comment_plates.tenant_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load comment_plates")
	}

	var resultSlice []*CommentPlate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice comment_plates")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on comment_plates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for comment_plates")
	}

	if len(commentPlateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CommentPlates = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &commentPlateR{}
			}
			foreign.R.Tenant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TenantID {
				local.R.CommentPlates = append(local.R.CommentPlates, foreign)
				if foreign.R == nil {
					foreign.R = &commentPlateR{}
				}
				foreign.R.Tenant = local
				break
			}
		}
	}

	return nil
}

// LoadComments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tenantL) LoadComments(e boil.Executor, singular bool, maybeTenant interface{}, mods queries.Applicator) error {
	var slice []*Tenant
	var object *Tenant

	if singular {
		var ok bool
		object, ok = maybeTenant.(*Tenant)
		if !ok {
			object = new(Tenant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenant))
			}
		}
	} else {
		s, ok := maybeTenant.(*[]*Tenant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenant))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tenantR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`comments`),
		qm.WhereIn(`comments.tenant_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load comments")
	}

	var resultSlice []*Comment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice comments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on comments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for comments")
	}

	if len(commentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Comments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &commentR{}
			}
			foreign.R.Tenant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TenantID {
				local.R.Comments = append(local.R.Comments, foreign)
				if foreign.R == nil {
					foreign.R = &commentR{}
				}
				foreign.R.Tenant = local
				break
			}
		}
	}

	return nil
}

// LoadImgCategories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tenantL) LoadImgCategories(e boil.Executor, singular bool, maybeTenant interface{}, mods queries.Applicator) error {
	var slice []*Tenant
	var object *Tenant

	if singular {
		var ok bool
		object, ok = maybeTenant.(*Tenant)
		if !ok {
			object = new(Tenant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenant))
			}
		}
	} else {
		s, ok := maybeTenant.(*[]*Tenant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenant))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tenantR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`img_categories`),
		qm.WhereIn(`img_categories.tenant_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load img_categories")
	}

	var resultSlice []*ImgCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice img_categories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on img_categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for img_categories")
	}

	if len(imgCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ImgCategories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &imgCategoryR{}
			}
			foreign.R.Tenant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TenantID {
				local.R.ImgCategories = append(local.R.ImgCategories, foreign)
				if foreign.R == nil {
					foreign.R = &imgCategoryR{}
				}
				foreign.R.Tenant = local
				break
			}
		}
	}

	return nil
}

// LoadImgs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tenantL) LoadImgs(e boil.Executor, singular bool, maybeTenant interface{}, mods queries.Applicator) error {
	var slice []*Tenant
	var object *Tenant

	if singular {
		var ok bool
		object, ok = maybeTenant.(*Tenant)
		if !ok {
			object = new(Tenant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenant))
			}
		}
	} else {
		s, ok := maybeTenant.(*[]*Tenant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenant))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tenantR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`imgs`),
		qm.WhereIn(`imgs.tenant_id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`imgs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load imgs")
	}

	var resultSlice []*Img
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice imgs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on imgs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for imgs")
	}

	if len(imgAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Imgs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &imgR{}
			}
			foreign.R.Tenant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TenantID {
				local.R.Imgs = append(local.R.Imgs, foreign)
				if foreign.R == nil {
					foreign.R = &imgR{}
				}
				foreign.R.Tenant = local
				break
			}
		}
	}

	return nil
}

// SetCreatorG of the tenant to the related item.
// Sets o.R.Creator to related.
// Adds o to related.R.CreatorTenants.
// Uses the global database handle.
func (o *Tenant) SetCreatorG(insert bool, related *User) error {
	return o.SetCreator(boil.GetDB(), insert, related)
}

// SetCreator of the tenant to the related item.
// Sets o.R.Creator to related.
// Adds o to related.R.CreatorTenants.
func (o *Tenant) SetCreator(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tenants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"creator_id"}),
		strmangle.WhereClause("\"", "\"", 2, tenantPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatorID = related.ID
	if o.R == nil {
		o.R = &tenantR{
			Creator: related,
		}
	} else {
		o.R.Creator = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatorTenants: TenantSlice{o},
		}
	} else {
		related.R.CreatorTenants = append(related.R.CreatorTenants, o)
	}

	return nil
}

// SetCommentTenantConfigG of the tenant to the related item.
// Sets o.R.CommentTenantConfig to related.
// Adds o to related.R.Tenant.
// Uses the global database handle.
func (o *Tenant) SetCommentTenantConfigG(insert bool, related *CommentTenantConfig) error {
	return o.SetCommentTenantConfig(boil.GetDB(), insert, related)
}

// SetCommentTenantConfig of the tenant to the related item.
// Sets o.R.CommentTenantConfig to related.
// Adds o to related.R.Tenant.
func (o *Tenant) SetCommentTenantConfig(exec boil.Executor, insert bool, related *CommentTenantConfig) error {
	var err error

	if insert {
		related.TenantID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"comment_tenant_configs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
			strmangle.WhereClause("\"", "\"", 2, commentTenantConfigPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.TenantID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.TenantID = o.ID
	}

	if o.R == nil {
		o.R = &tenantR{
			CommentTenantConfig: related,
		}
	} else {
		o.R.CommentTenantConfig = related
	}

	if related.R == nil {
		related.R = &commentTenantConfigR{
			Tenant: o,
		}
	} else {
		related.R.Tenant = o
	}
	return nil
}

// SetTenantR2ConfigG of the tenant to the related item.
// Sets o.R.TenantR2Config to related.
// Adds o to related.R.Tenant.
// Uses the global database handle.
func (o *Tenant) SetTenantR2ConfigG(insert bool, related *TenantR2Config) error {
	return o.SetTenantR2Config(boil.GetDB(), insert, related)
}

// SetTenantR2Config of the tenant to the related item.
// Sets o.R.TenantR2Config to related.
// Adds o to related.R.Tenant.
func (o *Tenant) SetTenantR2Config(exec boil.Executor, insert bool, related *TenantR2Config) error {
	var err error

	if insert {
		related.TenantID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"tenant_r2_configs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
			strmangle.WhereClause("\"", "\"", 2, tenantR2ConfigPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.TenantID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.TenantID = o.ID
	}

	if o.R == nil {
		o.R = &tenantR{
			TenantR2Config: related,
		}
	} else {
		o.R.TenantR2Config = related
	}

	if related.R == nil {
		related.R = &tenantR2ConfigR{
			Tenant: o,
		}
	} else {
		related.R.Tenant = o
	}
	return nil
}

// AddCommentPlateConfigsG adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.CommentPlateConfigs.
// Sets related.R.Tenant appropriately.
// Uses the global database handle.
func (o *Tenant) AddCommentPlateConfigsG(insert bool, related ...*CommentPlateConfig) error {
	return o.AddCommentPlateConfigs(boil.GetDB(), insert, related...)
}

// AddCommentPlateConfigs adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.CommentPlateConfigs.
// Sets related.R.Tenant appropriately.
func (o *Tenant) AddCommentPlateConfigs(exec boil.Executor, insert bool, related ...*CommentPlateConfig) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TenantID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"comment_plate_configs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
				strmangle.WhereClause("\"", "\"", 2, commentPlateConfigPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.TenantID, rel.PlateID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TenantID = o.ID
		}
	}

	if o.R == nil {
		o.R = &tenantR{
			CommentPlateConfigs: related,
		}
	} else {
		o.R.CommentPlateConfigs = append(o.R.CommentPlateConfigs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &commentPlateConfigR{
				Tenant: o,
			}
		} else {
			rel.R.Tenant = o
		}
	}
	return nil
}

// AddCommentPlatesG adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.CommentPlates.
// Sets related.R.Tenant appropriately.
// Uses the global database handle.
func (o *Tenant) AddCommentPlatesG(insert bool, related ...*CommentPlate) error {
	return o.AddCommentPlates(boil.GetDB(), insert, related...)
}

// AddCommentPlates adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.CommentPlates.
// Sets related.R.Tenant appropriately.
func (o *Tenant) AddCommentPlates(exec boil.Executor, insert bool, related ...*CommentPlate) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TenantID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"comment_plates\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
				strmangle.WhereClause("\"", "\"", 2, commentPlatePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TenantID = o.ID
		}
	}

	if o.R == nil {
		o.R = &tenantR{
			CommentPlates: related,
		}
	} else {
		o.R.CommentPlates = append(o.R.CommentPlates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &commentPlateR{
				Tenant: o,
			}
		} else {
			rel.R.Tenant = o
		}
	}
	return nil
}

// AddCommentsG adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Comments.
// Sets related.R.Tenant appropriately.
// Uses the global database handle.
func (o *Tenant) AddCommentsG(insert bool, related ...*Comment) error {
	return o.AddComments(boil.GetDB(), insert, related...)
}

// AddComments adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Comments.
// Sets related.R.Tenant appropriately.
func (o *Tenant) AddComments(exec boil.Executor, insert bool, related ...*Comment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TenantID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"comments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
				strmangle.WhereClause("\"", "\"", 2, commentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TenantID = o.ID
		}
	}

	if o.R == nil {
		o.R = &tenantR{
			Comments: related,
		}
	} else {
		o.R.Comments = append(o.R.Comments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &commentR{
				Tenant: o,
			}
		} else {
			rel.R.Tenant = o
		}
	}
	return nil
}

// AddImgCategoriesG adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.ImgCategories.
// Sets related.R.Tenant appropriately.
// Uses the global database handle.
func (o *Tenant) AddImgCategoriesG(insert bool, related ...*ImgCategory) error {
	return o.AddImgCategories(boil.GetDB(), insert, related...)
}

// AddImgCategories adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.ImgCategories.
// Sets related.R.Tenant appropriately.
func (o *Tenant) AddImgCategories(exec boil.Executor, insert bool, related ...*ImgCategory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TenantID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"img_categories\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
				strmangle.WhereClause("\"", "\"", 2, imgCategoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TenantID = o.ID
		}
	}

	if o.R == nil {
		o.R = &tenantR{
			ImgCategories: related,
		}
	} else {
		o.R.ImgCategories = append(o.R.ImgCategories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &imgCategoryR{
				Tenant: o,
			}
		} else {
			rel.R.Tenant = o
		}
	}
	return nil
}

// AddImgsG adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Imgs.
// Sets related.R.Tenant appropriately.
// Uses the global database handle.
func (o *Tenant) AddImgsG(insert bool, related ...*Img) error {
	return o.AddImgs(boil.GetDB(), insert, related...)
}

// AddImgs adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Imgs.
// Sets related.R.Tenant appropriately.
func (o *Tenant) AddImgs(exec boil.Executor, insert bool, related ...*Img) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TenantID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"imgs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
				strmangle.WhereClause("\"", "\"", 2, imgPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TenantID = o.ID
		}
	}

	if o.R == nil {
		o.R = &tenantR{
			Imgs: related,
		}
	} else {
		o.R.Imgs = append(o.R.Imgs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &imgR{
				Tenant: o,
			}
		} else {
			rel.R.Tenant = o
		}
	}
	return nil
}

// Tenants retrieves all the records using an executor.
func Tenants(mods ...qm.QueryMod) tenantQuery {
	mods = append(mods, qm.From("\"tenants\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tenants\".*"})
	}

	return tenantQuery{q}
}

// FindTenantG retrieves a single record by ID.
func FindTenantG(iD int64, selectCols ...string) (*Tenant, error) {
	return FindTenant(boil.GetDB(), iD, selectCols...)
}

// FindTenant retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTenant(exec boil.Executor, iD int64, selectCols ...string) (*Tenant, error) {
	tenantObj := &Tenant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tenants\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, tenantObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from tenants")
	}

	if err = tenantObj.doAfterSelectHooks(exec); err != nil {
		return tenantObj, err
	}

	return tenantObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Tenant) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Tenant) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no tenants provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tenantColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tenantInsertCacheMut.RLock()
	cache, cached := tenantInsertCache[key]
	tenantInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tenantAllColumns,
			tenantColumnsWithDefault,
			tenantColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tenantType, tenantMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tenantType, tenantMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tenants\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tenants\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into tenants")
	}

	if !cached {
		tenantInsertCacheMut.Lock()
		tenantInsertCache[key] = cache
		tenantInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Tenant record using the global executor.
// See Update for more documentation.
func (o *Tenant) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Tenant.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Tenant) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tenantUpdateCacheMut.RLock()
	cache, cached := tenantUpdateCache[key]
	tenantUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tenantAllColumns,
			tenantPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update tenants, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tenants\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tenantPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tenantType, tenantMapping, append(wl, tenantPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update tenants row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for tenants")
	}

	if !cached {
		tenantUpdateCacheMut.Lock()
		tenantUpdateCache[key] = cache
		tenantUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q tenantQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q tenantQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for tenants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for tenants")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TenantSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TenantSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tenants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tenantPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in tenant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all tenant")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Tenant) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Tenant) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no tenants provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tenantColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tenantUpsertCacheMut.RLock()
	cache, cached := tenantUpsertCache[key]
	tenantUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			tenantAllColumns,
			tenantColumnsWithDefault,
			tenantColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tenantAllColumns,
			tenantPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert tenants, could not build update column list")
		}

		ret := strmangle.SetComplement(tenantAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(tenantPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert tenants, could not build conflict column list")
			}

			conflict = make([]string, len(tenantPrimaryKeyColumns))
			copy(conflict, tenantPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tenants\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(tenantType, tenantMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tenantType, tenantMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert tenants")
	}

	if !cached {
		tenantUpsertCacheMut.Lock()
		tenantUpsertCache[key] = cache
		tenantUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Tenant record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Tenant) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Tenant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Tenant) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Tenant provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tenantPrimaryKeyMapping)
	sql := "DELETE FROM \"tenants\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from tenants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for tenants")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q tenantQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q tenantQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no tenantQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from tenants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for tenants")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TenantSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TenantSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tenantBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tenants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tenantPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from tenant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for tenants")
	}

	if len(tenantAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Tenant) ReloadG() error {
	if o == nil {
		return errors.New("orm: no Tenant provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Tenant) Reload(exec boil.Executor) error {
	ret, err := FindTenant(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TenantSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("orm: empty TenantSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TenantSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TenantSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tenants\".* FROM \"tenants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tenantPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in TenantSlice")
	}

	*o = slice

	return nil
}

// TenantExistsG checks if the Tenant row exists.
func TenantExistsG(iD int64) (bool, error) {
	return TenantExists(boil.GetDB(), iD)
}

// TenantExists checks if the Tenant row exists.
func TenantExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tenants\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if tenants exists")
	}

	return exists, nil
}

// Exists checks if the Tenant row exists.
func (o *Tenant) Exists(exec boil.Executor) (bool, error) {
	return TenantExists(exec, o.ID)
}
