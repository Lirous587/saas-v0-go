// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// CommentLike is an object representing the database table.
type CommentLike struct {
	CommentID int64     `boil:"comment_id" json:"comment_id" toml:"comment_id" yaml:"comment_id"`
	UserID    int64     `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *commentLikeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L commentLikeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CommentLikeColumns = struct {
	CommentID string
	UserID    string
	CreatedAt string
}{
	CommentID: "comment_id",
	UserID:    "user_id",
	CreatedAt: "created_at",
}

var CommentLikeTableColumns = struct {
	CommentID string
	UserID    string
	CreatedAt string
}{
	CommentID: "comment_likes.comment_id",
	UserID:    "comment_likes.user_id",
	CreatedAt: "comment_likes.created_at",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CommentLikeWhere = struct {
	CommentID whereHelperint64
	UserID    whereHelperint64
	CreatedAt whereHelpertime_Time
}{
	CommentID: whereHelperint64{field: "\"comment_likes\".\"comment_id\""},
	UserID:    whereHelperint64{field: "\"comment_likes\".\"user_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"comment_likes\".\"created_at\""},
}

// CommentLikeRels is where relationship names are stored.
var CommentLikeRels = struct {
	Comment string
	User    string
}{
	Comment: "Comment",
	User:    "User",
}

// commentLikeR is where relationships are stored.
type commentLikeR struct {
	Comment *Comment `boil:"Comment" json:"Comment" toml:"Comment" yaml:"Comment"`
	User    *User    `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*commentLikeR) NewStruct() *commentLikeR {
	return &commentLikeR{}
}

func (o *CommentLike) GetComment() *Comment {
	if o == nil {
		return nil
	}

	return o.R.GetComment()
}

func (r *commentLikeR) GetComment() *Comment {
	if r == nil {
		return nil
	}

	return r.Comment
}

func (o *CommentLike) GetUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetUser()
}

func (r *commentLikeR) GetUser() *User {
	if r == nil {
		return nil
	}

	return r.User
}

// commentLikeL is where Load methods for each relationship are stored.
type commentLikeL struct{}

var (
	commentLikeAllColumns            = []string{"comment_id", "user_id", "created_at"}
	commentLikeColumnsWithoutDefault = []string{"comment_id", "user_id"}
	commentLikeColumnsWithDefault    = []string{"created_at"}
	commentLikePrimaryKeyColumns     = []string{"comment_id", "user_id"}
	commentLikeGeneratedColumns      = []string{}
)

type (
	// CommentLikeSlice is an alias for a slice of pointers to CommentLike.
	// This should almost always be used instead of []CommentLike.
	CommentLikeSlice []*CommentLike
	// CommentLikeHook is the signature for custom CommentLike hook methods
	CommentLikeHook func(boil.Executor, *CommentLike) error

	commentLikeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	commentLikeType                 = reflect.TypeOf(&CommentLike{})
	commentLikeMapping              = queries.MakeStructMapping(commentLikeType)
	commentLikePrimaryKeyMapping, _ = queries.BindMapping(commentLikeType, commentLikeMapping, commentLikePrimaryKeyColumns)
	commentLikeInsertCacheMut       sync.RWMutex
	commentLikeInsertCache          = make(map[string]insertCache)
	commentLikeUpdateCacheMut       sync.RWMutex
	commentLikeUpdateCache          = make(map[string]updateCache)
	commentLikeUpsertCacheMut       sync.RWMutex
	commentLikeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var commentLikeAfterSelectMu sync.Mutex
var commentLikeAfterSelectHooks []CommentLikeHook

var commentLikeBeforeInsertMu sync.Mutex
var commentLikeBeforeInsertHooks []CommentLikeHook
var commentLikeAfterInsertMu sync.Mutex
var commentLikeAfterInsertHooks []CommentLikeHook

var commentLikeBeforeUpdateMu sync.Mutex
var commentLikeBeforeUpdateHooks []CommentLikeHook
var commentLikeAfterUpdateMu sync.Mutex
var commentLikeAfterUpdateHooks []CommentLikeHook

var commentLikeBeforeDeleteMu sync.Mutex
var commentLikeBeforeDeleteHooks []CommentLikeHook
var commentLikeAfterDeleteMu sync.Mutex
var commentLikeAfterDeleteHooks []CommentLikeHook

var commentLikeBeforeUpsertMu sync.Mutex
var commentLikeBeforeUpsertHooks []CommentLikeHook
var commentLikeAfterUpsertMu sync.Mutex
var commentLikeAfterUpsertHooks []CommentLikeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CommentLike) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range commentLikeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CommentLike) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range commentLikeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CommentLike) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range commentLikeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CommentLike) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range commentLikeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CommentLike) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range commentLikeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CommentLike) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range commentLikeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CommentLike) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range commentLikeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CommentLike) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range commentLikeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CommentLike) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range commentLikeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCommentLikeHook registers your hook function for all future operations.
func AddCommentLikeHook(hookPoint boil.HookPoint, commentLikeHook CommentLikeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		commentLikeAfterSelectMu.Lock()
		commentLikeAfterSelectHooks = append(commentLikeAfterSelectHooks, commentLikeHook)
		commentLikeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		commentLikeBeforeInsertMu.Lock()
		commentLikeBeforeInsertHooks = append(commentLikeBeforeInsertHooks, commentLikeHook)
		commentLikeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		commentLikeAfterInsertMu.Lock()
		commentLikeAfterInsertHooks = append(commentLikeAfterInsertHooks, commentLikeHook)
		commentLikeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		commentLikeBeforeUpdateMu.Lock()
		commentLikeBeforeUpdateHooks = append(commentLikeBeforeUpdateHooks, commentLikeHook)
		commentLikeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		commentLikeAfterUpdateMu.Lock()
		commentLikeAfterUpdateHooks = append(commentLikeAfterUpdateHooks, commentLikeHook)
		commentLikeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		commentLikeBeforeDeleteMu.Lock()
		commentLikeBeforeDeleteHooks = append(commentLikeBeforeDeleteHooks, commentLikeHook)
		commentLikeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		commentLikeAfterDeleteMu.Lock()
		commentLikeAfterDeleteHooks = append(commentLikeAfterDeleteHooks, commentLikeHook)
		commentLikeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		commentLikeBeforeUpsertMu.Lock()
		commentLikeBeforeUpsertHooks = append(commentLikeBeforeUpsertHooks, commentLikeHook)
		commentLikeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		commentLikeAfterUpsertMu.Lock()
		commentLikeAfterUpsertHooks = append(commentLikeAfterUpsertHooks, commentLikeHook)
		commentLikeAfterUpsertMu.Unlock()
	}
}

// OneG returns a single commentLike record from the query using the global executor.
func (q commentLikeQuery) OneG() (*CommentLike, error) {
	return q.One(boil.GetDB())
}

// One returns a single commentLike record from the query.
func (q commentLikeQuery) One(exec boil.Executor) (*CommentLike, error) {
	o := &CommentLike{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for comment_likes")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all CommentLike records from the query using the global executor.
func (q commentLikeQuery) AllG() (CommentLikeSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all CommentLike records from the query.
func (q commentLikeQuery) All(exec boil.Executor) (CommentLikeSlice, error) {
	var o []*CommentLike

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to CommentLike slice")
	}

	if len(commentLikeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all CommentLike records in the query using the global executor
func (q commentLikeQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all CommentLike records in the query.
func (q commentLikeQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count comment_likes rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q commentLikeQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q commentLikeQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if comment_likes exists")
	}

	return count > 0, nil
}

// Comment pointed to by the foreign key.
func (o *CommentLike) Comment(mods ...qm.QueryMod) commentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CommentID),
	}

	queryMods = append(queryMods, mods...)

	return Comments(queryMods...)
}

// User pointed to by the foreign key.
func (o *CommentLike) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadComment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (commentLikeL) LoadComment(e boil.Executor, singular bool, maybeCommentLike interface{}, mods queries.Applicator) error {
	var slice []*CommentLike
	var object *CommentLike

	if singular {
		var ok bool
		object, ok = maybeCommentLike.(*CommentLike)
		if !ok {
			object = new(CommentLike)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCommentLike)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCommentLike))
			}
		}
	} else {
		s, ok := maybeCommentLike.(*[]*CommentLike)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCommentLike)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCommentLike))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &commentLikeR{}
		}
		args[object.CommentID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &commentLikeR{}
			}

			args[obj.CommentID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`comments`),
		qm.WhereIn(`comments.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Comment")
	}

	var resultSlice []*Comment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Comment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for comments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for comments")
	}

	if len(commentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Comment = foreign
		if foreign.R == nil {
			foreign.R = &commentR{}
		}
		foreign.R.CommentLikes = append(foreign.R.CommentLikes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CommentID == foreign.ID {
				local.R.Comment = foreign
				if foreign.R == nil {
					foreign.R = &commentR{}
				}
				foreign.R.CommentLikes = append(foreign.R.CommentLikes, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (commentLikeL) LoadUser(e boil.Executor, singular bool, maybeCommentLike interface{}, mods queries.Applicator) error {
	var slice []*CommentLike
	var object *CommentLike

	if singular {
		var ok bool
		object, ok = maybeCommentLike.(*CommentLike)
		if !ok {
			object = new(CommentLike)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCommentLike)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCommentLike))
			}
		}
	} else {
		s, ok := maybeCommentLike.(*[]*CommentLike)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCommentLike)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCommentLike))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &commentLikeR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &commentLikeR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CommentLikes = append(foreign.R.CommentLikes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CommentLikes = append(foreign.R.CommentLikes, local)
				break
			}
		}
	}

	return nil
}

// SetCommentG of the commentLike to the related item.
// Sets o.R.Comment to related.
// Adds o to related.R.CommentLikes.
// Uses the global database handle.
func (o *CommentLike) SetCommentG(insert bool, related *Comment) error {
	return o.SetComment(boil.GetDB(), insert, related)
}

// SetComment of the commentLike to the related item.
// Sets o.R.Comment to related.
// Adds o to related.R.CommentLikes.
func (o *CommentLike) SetComment(exec boil.Executor, insert bool, related *Comment) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"comment_likes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"comment_id"}),
		strmangle.WhereClause("\"", "\"", 2, commentLikePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.CommentID, o.UserID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CommentID = related.ID
	if o.R == nil {
		o.R = &commentLikeR{
			Comment: related,
		}
	} else {
		o.R.Comment = related
	}

	if related.R == nil {
		related.R = &commentR{
			CommentLikes: CommentLikeSlice{o},
		}
	} else {
		related.R.CommentLikes = append(related.R.CommentLikes, o)
	}

	return nil
}

// SetUserG of the commentLike to the related item.
// Sets o.R.User to related.
// Adds o to related.R.CommentLikes.
// Uses the global database handle.
func (o *CommentLike) SetUserG(insert bool, related *User) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUser of the commentLike to the related item.
// Sets o.R.User to related.
// Adds o to related.R.CommentLikes.
func (o *CommentLike) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"comment_likes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, commentLikePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.CommentID, o.UserID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &commentLikeR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			CommentLikes: CommentLikeSlice{o},
		}
	} else {
		related.R.CommentLikes = append(related.R.CommentLikes, o)
	}

	return nil
}

// CommentLikes retrieves all the records using an executor.
func CommentLikes(mods ...qm.QueryMod) commentLikeQuery {
	mods = append(mods, qm.From("\"comment_likes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"comment_likes\".*"})
	}

	return commentLikeQuery{q}
}

// FindCommentLikeG retrieves a single record by ID.
func FindCommentLikeG(commentID int64, userID int64, selectCols ...string) (*CommentLike, error) {
	return FindCommentLike(boil.GetDB(), commentID, userID, selectCols...)
}

// FindCommentLike retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCommentLike(exec boil.Executor, commentID int64, userID int64, selectCols ...string) (*CommentLike, error) {
	commentLikeObj := &CommentLike{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"comment_likes\" where \"comment_id\"=$1 AND \"user_id\"=$2", sel,
	)

	q := queries.Raw(query, commentID, userID)

	err := q.Bind(nil, exec, commentLikeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from comment_likes")
	}

	if err = commentLikeObj.doAfterSelectHooks(exec); err != nil {
		return commentLikeObj, err
	}

	return commentLikeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CommentLike) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CommentLike) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no comment_likes provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(commentLikeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	commentLikeInsertCacheMut.RLock()
	cache, cached := commentLikeInsertCache[key]
	commentLikeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			commentLikeAllColumns,
			commentLikeColumnsWithDefault,
			commentLikeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(commentLikeType, commentLikeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(commentLikeType, commentLikeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"comment_likes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"comment_likes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into comment_likes")
	}

	if !cached {
		commentLikeInsertCacheMut.Lock()
		commentLikeInsertCache[key] = cache
		commentLikeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single CommentLike record using the global executor.
// See Update for more documentation.
func (o *CommentLike) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the CommentLike.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CommentLike) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	commentLikeUpdateCacheMut.RLock()
	cache, cached := commentLikeUpdateCache[key]
	commentLikeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			commentLikeAllColumns,
			commentLikePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update comment_likes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"comment_likes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, commentLikePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(commentLikeType, commentLikeMapping, append(wl, commentLikePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update comment_likes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for comment_likes")
	}

	if !cached {
		commentLikeUpdateCacheMut.Lock()
		commentLikeUpdateCache[key] = cache
		commentLikeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q commentLikeQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q commentLikeQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for comment_likes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for comment_likes")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CommentLikeSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CommentLikeSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentLikePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"comment_likes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, commentLikePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in commentLike slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all commentLike")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CommentLike) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CommentLike) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no comment_likes provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(commentLikeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	commentLikeUpsertCacheMut.RLock()
	cache, cached := commentLikeUpsertCache[key]
	commentLikeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			commentLikeAllColumns,
			commentLikeColumnsWithDefault,
			commentLikeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			commentLikeAllColumns,
			commentLikePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert comment_likes, could not build update column list")
		}

		ret := strmangle.SetComplement(commentLikeAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(commentLikePrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert comment_likes, could not build conflict column list")
			}

			conflict = make([]string, len(commentLikePrimaryKeyColumns))
			copy(conflict, commentLikePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"comment_likes\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(commentLikeType, commentLikeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(commentLikeType, commentLikeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert comment_likes")
	}

	if !cached {
		commentLikeUpsertCacheMut.Lock()
		commentLikeUpsertCache[key] = cache
		commentLikeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single CommentLike record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CommentLike) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single CommentLike record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CommentLike) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no CommentLike provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), commentLikePrimaryKeyMapping)
	sql := "DELETE FROM \"comment_likes\" WHERE \"comment_id\"=$1 AND \"user_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from comment_likes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for comment_likes")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q commentLikeQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q commentLikeQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no commentLikeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from comment_likes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for comment_likes")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CommentLikeSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CommentLikeSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(commentLikeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentLikePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"comment_likes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, commentLikePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from commentLike slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for comment_likes")
	}

	if len(commentLikeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CommentLike) ReloadG() error {
	if o == nil {
		return errors.New("orm: no CommentLike provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CommentLike) Reload(exec boil.Executor) error {
	ret, err := FindCommentLike(exec, o.CommentID, o.UserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommentLikeSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("orm: empty CommentLikeSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommentLikeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CommentLikeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentLikePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"comment_likes\".* FROM \"comment_likes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, commentLikePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in CommentLikeSlice")
	}

	*o = slice

	return nil
}

// CommentLikeExistsG checks if the CommentLike row exists.
func CommentLikeExistsG(commentID int64, userID int64) (bool, error) {
	return CommentLikeExists(boil.GetDB(), commentID, userID)
}

// CommentLikeExists checks if the CommentLike row exists.
func CommentLikeExists(exec boil.Executor, commentID int64, userID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"comment_likes\" where \"comment_id\"=$1 AND \"user_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, commentID, userID)
	}
	row := exec.QueryRow(sql, commentID, userID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if comment_likes exists")
	}

	return exists, nil
}

// Exists checks if the CommentLike row exists.
func (o *CommentLike) Exists(exec boil.Executor) (bool, error) {
	return CommentLikeExists(exec, o.CommentID, o.UserID)
}
