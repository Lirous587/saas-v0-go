// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// ImgCategory is an object representing the database table.
type ImgCategory struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	TenantID  string    `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	Title     string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Prefix    string    `boil:"prefix" json:"prefix" toml:"prefix" yaml:"prefix"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *imgCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L imgCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ImgCategoryColumns = struct {
	ID        string
	TenantID  string
	Title     string
	Prefix    string
	CreatedAt string
}{
	ID:        "id",
	TenantID:  "tenant_id",
	Title:     "title",
	Prefix:    "prefix",
	CreatedAt: "created_at",
}

var ImgCategoryTableColumns = struct {
	ID        string
	TenantID  string
	Title     string
	Prefix    string
	CreatedAt string
}{
	ID:        "img_categories.id",
	TenantID:  "img_categories.tenant_id",
	Title:     "img_categories.title",
	Prefix:    "img_categories.prefix",
	CreatedAt: "img_categories.created_at",
}

// Generated where

var ImgCategoryWhere = struct {
	ID        whereHelperstring
	TenantID  whereHelperstring
	Title     whereHelperstring
	Prefix    whereHelperstring
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"img_categories\".\"id\""},
	TenantID:  whereHelperstring{field: "\"img_categories\".\"tenant_id\""},
	Title:     whereHelperstring{field: "\"img_categories\".\"title\""},
	Prefix:    whereHelperstring{field: "\"img_categories\".\"prefix\""},
	CreatedAt: whereHelpertime_Time{field: "\"img_categories\".\"created_at\""},
}

// ImgCategoryRels is where relationship names are stored.
var ImgCategoryRels = struct {
	Tenant       string
	CategoryImgs string
}{
	Tenant:       "Tenant",
	CategoryImgs: "CategoryImgs",
}

// imgCategoryR is where relationships are stored.
type imgCategoryR struct {
	Tenant       *Tenant  `boil:"Tenant" json:"Tenant" toml:"Tenant" yaml:"Tenant"`
	CategoryImgs ImgSlice `boil:"CategoryImgs" json:"CategoryImgs" toml:"CategoryImgs" yaml:"CategoryImgs"`
}

// NewStruct creates a new relationship struct
func (*imgCategoryR) NewStruct() *imgCategoryR {
	return &imgCategoryR{}
}

func (o *ImgCategory) GetTenant() *Tenant {
	if o == nil {
		return nil
	}

	return o.R.GetTenant()
}

func (r *imgCategoryR) GetTenant() *Tenant {
	if r == nil {
		return nil
	}

	return r.Tenant
}

func (o *ImgCategory) GetCategoryImgs() ImgSlice {
	if o == nil {
		return nil
	}

	return o.R.GetCategoryImgs()
}

func (r *imgCategoryR) GetCategoryImgs() ImgSlice {
	if r == nil {
		return nil
	}

	return r.CategoryImgs
}

// imgCategoryL is where Load methods for each relationship are stored.
type imgCategoryL struct{}

var (
	imgCategoryAllColumns            = []string{"id", "tenant_id", "title", "prefix", "created_at"}
	imgCategoryColumnsWithoutDefault = []string{"tenant_id", "title", "prefix"}
	imgCategoryColumnsWithDefault    = []string{"id", "created_at"}
	imgCategoryPrimaryKeyColumns     = []string{"id"}
	imgCategoryGeneratedColumns      = []string{}
)

type (
	// ImgCategorySlice is an alias for a slice of pointers to ImgCategory.
	// This should almost always be used instead of []ImgCategory.
	ImgCategorySlice []*ImgCategory
	// ImgCategoryHook is the signature for custom ImgCategory hook methods
	ImgCategoryHook func(boil.Executor, *ImgCategory) error

	imgCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	imgCategoryType                 = reflect.TypeOf(&ImgCategory{})
	imgCategoryMapping              = queries.MakeStructMapping(imgCategoryType)
	imgCategoryPrimaryKeyMapping, _ = queries.BindMapping(imgCategoryType, imgCategoryMapping, imgCategoryPrimaryKeyColumns)
	imgCategoryInsertCacheMut       sync.RWMutex
	imgCategoryInsertCache          = make(map[string]insertCache)
	imgCategoryUpdateCacheMut       sync.RWMutex
	imgCategoryUpdateCache          = make(map[string]updateCache)
	imgCategoryUpsertCacheMut       sync.RWMutex
	imgCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var imgCategoryAfterSelectMu sync.Mutex
var imgCategoryAfterSelectHooks []ImgCategoryHook

var imgCategoryBeforeInsertMu sync.Mutex
var imgCategoryBeforeInsertHooks []ImgCategoryHook
var imgCategoryAfterInsertMu sync.Mutex
var imgCategoryAfterInsertHooks []ImgCategoryHook

var imgCategoryBeforeUpdateMu sync.Mutex
var imgCategoryBeforeUpdateHooks []ImgCategoryHook
var imgCategoryAfterUpdateMu sync.Mutex
var imgCategoryAfterUpdateHooks []ImgCategoryHook

var imgCategoryBeforeDeleteMu sync.Mutex
var imgCategoryBeforeDeleteHooks []ImgCategoryHook
var imgCategoryAfterDeleteMu sync.Mutex
var imgCategoryAfterDeleteHooks []ImgCategoryHook

var imgCategoryBeforeUpsertMu sync.Mutex
var imgCategoryBeforeUpsertHooks []ImgCategoryHook
var imgCategoryAfterUpsertMu sync.Mutex
var imgCategoryAfterUpsertHooks []ImgCategoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ImgCategory) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range imgCategoryAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ImgCategory) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range imgCategoryBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ImgCategory) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range imgCategoryAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ImgCategory) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range imgCategoryBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ImgCategory) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range imgCategoryAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ImgCategory) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range imgCategoryBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ImgCategory) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range imgCategoryAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ImgCategory) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range imgCategoryBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ImgCategory) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range imgCategoryAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddImgCategoryHook registers your hook function for all future operations.
func AddImgCategoryHook(hookPoint boil.HookPoint, imgCategoryHook ImgCategoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		imgCategoryAfterSelectMu.Lock()
		imgCategoryAfterSelectHooks = append(imgCategoryAfterSelectHooks, imgCategoryHook)
		imgCategoryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		imgCategoryBeforeInsertMu.Lock()
		imgCategoryBeforeInsertHooks = append(imgCategoryBeforeInsertHooks, imgCategoryHook)
		imgCategoryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		imgCategoryAfterInsertMu.Lock()
		imgCategoryAfterInsertHooks = append(imgCategoryAfterInsertHooks, imgCategoryHook)
		imgCategoryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		imgCategoryBeforeUpdateMu.Lock()
		imgCategoryBeforeUpdateHooks = append(imgCategoryBeforeUpdateHooks, imgCategoryHook)
		imgCategoryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		imgCategoryAfterUpdateMu.Lock()
		imgCategoryAfterUpdateHooks = append(imgCategoryAfterUpdateHooks, imgCategoryHook)
		imgCategoryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		imgCategoryBeforeDeleteMu.Lock()
		imgCategoryBeforeDeleteHooks = append(imgCategoryBeforeDeleteHooks, imgCategoryHook)
		imgCategoryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		imgCategoryAfterDeleteMu.Lock()
		imgCategoryAfterDeleteHooks = append(imgCategoryAfterDeleteHooks, imgCategoryHook)
		imgCategoryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		imgCategoryBeforeUpsertMu.Lock()
		imgCategoryBeforeUpsertHooks = append(imgCategoryBeforeUpsertHooks, imgCategoryHook)
		imgCategoryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		imgCategoryAfterUpsertMu.Lock()
		imgCategoryAfterUpsertHooks = append(imgCategoryAfterUpsertHooks, imgCategoryHook)
		imgCategoryAfterUpsertMu.Unlock()
	}
}

// OneG returns a single imgCategory record from the query using the global executor.
func (q imgCategoryQuery) OneG() (*ImgCategory, error) {
	return q.One(boil.GetDB())
}

// One returns a single imgCategory record from the query.
func (q imgCategoryQuery) One(exec boil.Executor) (*ImgCategory, error) {
	o := &ImgCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for img_categories")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ImgCategory records from the query using the global executor.
func (q imgCategoryQuery) AllG() (ImgCategorySlice, error) {
	return q.All(boil.GetDB())
}

// All returns all ImgCategory records from the query.
func (q imgCategoryQuery) All(exec boil.Executor) (ImgCategorySlice, error) {
	var o []*ImgCategory

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to ImgCategory slice")
	}

	if len(imgCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ImgCategory records in the query using the global executor
func (q imgCategoryQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all ImgCategory records in the query.
func (q imgCategoryQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count img_categories rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q imgCategoryQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q imgCategoryQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if img_categories exists")
	}

	return count > 0, nil
}

// Tenant pointed to by the foreign key.
func (o *ImgCategory) Tenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TenantID),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// CategoryImgs retrieves all the img's Imgs with an executor via category_id column.
func (o *ImgCategory) CategoryImgs(mods ...qm.QueryMod) imgQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"imgs\".\"category_id\"=?", o.ID),
	)

	return Imgs(queryMods...)
}

// LoadTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (imgCategoryL) LoadTenant(e boil.Executor, singular bool, maybeImgCategory interface{}, mods queries.Applicator) error {
	var slice []*ImgCategory
	var object *ImgCategory

	if singular {
		var ok bool
		object, ok = maybeImgCategory.(*ImgCategory)
		if !ok {
			object = new(ImgCategory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeImgCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeImgCategory))
			}
		}
	} else {
		s, ok := maybeImgCategory.(*[]*ImgCategory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeImgCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeImgCategory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &imgCategoryR{}
		}
		args[object.TenantID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &imgCategoryR{}
			}

			args[obj.TenantID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.ImgCategories = append(foreign.R.ImgCategories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TenantID == foreign.ID {
				local.R.Tenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.ImgCategories = append(foreign.R.ImgCategories, local)
				break
			}
		}
	}

	return nil
}

// LoadCategoryImgs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (imgCategoryL) LoadCategoryImgs(e boil.Executor, singular bool, maybeImgCategory interface{}, mods queries.Applicator) error {
	var slice []*ImgCategory
	var object *ImgCategory

	if singular {
		var ok bool
		object, ok = maybeImgCategory.(*ImgCategory)
		if !ok {
			object = new(ImgCategory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeImgCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeImgCategory))
			}
		}
	} else {
		s, ok := maybeImgCategory.(*[]*ImgCategory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeImgCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeImgCategory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &imgCategoryR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &imgCategoryR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`imgs`),
		qm.WhereIn(`imgs.category_id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`imgs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load imgs")
	}

	var resultSlice []*Img
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice imgs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on imgs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for imgs")
	}

	if len(imgAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CategoryImgs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &imgR{}
			}
			foreign.R.Category = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CategoryID) {
				local.R.CategoryImgs = append(local.R.CategoryImgs, foreign)
				if foreign.R == nil {
					foreign.R = &imgR{}
				}
				foreign.R.Category = local
				break
			}
		}
	}

	return nil
}

// SetTenantG of the imgCategory to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.ImgCategories.
// Uses the global database handle.
func (o *ImgCategory) SetTenantG(insert bool, related *Tenant) error {
	return o.SetTenant(boil.GetDB(), insert, related)
}

// SetTenant of the imgCategory to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.ImgCategories.
func (o *ImgCategory) SetTenant(exec boil.Executor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"img_categories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
		strmangle.WhereClause("\"", "\"", 2, imgCategoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TenantID = related.ID
	if o.R == nil {
		o.R = &imgCategoryR{
			Tenant: related,
		}
	} else {
		o.R.Tenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			ImgCategories: ImgCategorySlice{o},
		}
	} else {
		related.R.ImgCategories = append(related.R.ImgCategories, o)
	}

	return nil
}

// AddCategoryImgsG adds the given related objects to the existing relationships
// of the img_category, optionally inserting them as new records.
// Appends related to o.R.CategoryImgs.
// Sets related.R.Category appropriately.
// Uses the global database handle.
func (o *ImgCategory) AddCategoryImgsG(insert bool, related ...*Img) error {
	return o.AddCategoryImgs(boil.GetDB(), insert, related...)
}

// AddCategoryImgs adds the given related objects to the existing relationships
// of the img_category, optionally inserting them as new records.
// Appends related to o.R.CategoryImgs.
// Sets related.R.Category appropriately.
func (o *ImgCategory) AddCategoryImgs(exec boil.Executor, insert bool, related ...*Img) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CategoryID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"imgs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
				strmangle.WhereClause("\"", "\"", 2, imgPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CategoryID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &imgCategoryR{
			CategoryImgs: related,
		}
	} else {
		o.R.CategoryImgs = append(o.R.CategoryImgs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &imgR{
				Category: o,
			}
		} else {
			rel.R.Category = o
		}
	}
	return nil
}

// SetCategoryImgsG removes all previously related items of the
// img_category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Category's CategoryImgs accordingly.
// Replaces o.R.CategoryImgs with related.
// Sets related.R.Category's CategoryImgs accordingly.
// Uses the global database handle.
func (o *ImgCategory) SetCategoryImgsG(insert bool, related ...*Img) error {
	return o.SetCategoryImgs(boil.GetDB(), insert, related...)
}

// SetCategoryImgs removes all previously related items of the
// img_category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Category's CategoryImgs accordingly.
// Replaces o.R.CategoryImgs with related.
// Sets related.R.Category's CategoryImgs accordingly.
func (o *ImgCategory) SetCategoryImgs(exec boil.Executor, insert bool, related ...*Img) error {
	query := "update \"imgs\" set \"category_id\" = null where \"category_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CategoryImgs {
			queries.SetScanner(&rel.CategoryID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Category = nil
		}
		o.R.CategoryImgs = nil
	}

	return o.AddCategoryImgs(exec, insert, related...)
}

// RemoveCategoryImgsG relationships from objects passed in.
// Removes related items from R.CategoryImgs (uses pointer comparison, removal does not keep order)
// Sets related.R.Category.
// Uses the global database handle.
func (o *ImgCategory) RemoveCategoryImgsG(related ...*Img) error {
	return o.RemoveCategoryImgs(boil.GetDB(), related...)
}

// RemoveCategoryImgs relationships from objects passed in.
// Removes related items from R.CategoryImgs (uses pointer comparison, removal does not keep order)
// Sets related.R.Category.
func (o *ImgCategory) RemoveCategoryImgs(exec boil.Executor, related ...*Img) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CategoryID, nil)
		if rel.R != nil {
			rel.R.Category = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("category_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CategoryImgs {
			if rel != ri {
				continue
			}

			ln := len(o.R.CategoryImgs)
			if ln > 1 && i < ln-1 {
				o.R.CategoryImgs[i] = o.R.CategoryImgs[ln-1]
			}
			o.R.CategoryImgs = o.R.CategoryImgs[:ln-1]
			break
		}
	}

	return nil
}

// ImgCategories retrieves all the records using an executor.
func ImgCategories(mods ...qm.QueryMod) imgCategoryQuery {
	mods = append(mods, qm.From("\"img_categories\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"img_categories\".*"})
	}

	return imgCategoryQuery{q}
}

// FindImgCategoryG retrieves a single record by ID.
func FindImgCategoryG(iD string, selectCols ...string) (*ImgCategory, error) {
	return FindImgCategory(boil.GetDB(), iD, selectCols...)
}

// FindImgCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindImgCategory(exec boil.Executor, iD string, selectCols ...string) (*ImgCategory, error) {
	imgCategoryObj := &ImgCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"img_categories\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, imgCategoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from img_categories")
	}

	if err = imgCategoryObj.doAfterSelectHooks(exec); err != nil {
		return imgCategoryObj, err
	}

	return imgCategoryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ImgCategory) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ImgCategory) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no img_categories provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(imgCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	imgCategoryInsertCacheMut.RLock()
	cache, cached := imgCategoryInsertCache[key]
	imgCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			imgCategoryAllColumns,
			imgCategoryColumnsWithDefault,
			imgCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(imgCategoryType, imgCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(imgCategoryType, imgCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"img_categories\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"img_categories\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into img_categories")
	}

	if !cached {
		imgCategoryInsertCacheMut.Lock()
		imgCategoryInsertCache[key] = cache
		imgCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single ImgCategory record using the global executor.
// See Update for more documentation.
func (o *ImgCategory) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the ImgCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ImgCategory) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	imgCategoryUpdateCacheMut.RLock()
	cache, cached := imgCategoryUpdateCache[key]
	imgCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			imgCategoryAllColumns,
			imgCategoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update img_categories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"img_categories\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, imgCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(imgCategoryType, imgCategoryMapping, append(wl, imgCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update img_categories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for img_categories")
	}

	if !cached {
		imgCategoryUpdateCacheMut.Lock()
		imgCategoryUpdateCache[key] = cache
		imgCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q imgCategoryQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q imgCategoryQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for img_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for img_categories")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ImgCategorySlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ImgCategorySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), imgCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"img_categories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, imgCategoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in imgCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all imgCategory")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ImgCategory) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ImgCategory) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no img_categories provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(imgCategoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	imgCategoryUpsertCacheMut.RLock()
	cache, cached := imgCategoryUpsertCache[key]
	imgCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			imgCategoryAllColumns,
			imgCategoryColumnsWithDefault,
			imgCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			imgCategoryAllColumns,
			imgCategoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert img_categories, could not build update column list")
		}

		ret := strmangle.SetComplement(imgCategoryAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(imgCategoryPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert img_categories, could not build conflict column list")
			}

			conflict = make([]string, len(imgCategoryPrimaryKeyColumns))
			copy(conflict, imgCategoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"img_categories\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(imgCategoryType, imgCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(imgCategoryType, imgCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert img_categories")
	}

	if !cached {
		imgCategoryUpsertCacheMut.Lock()
		imgCategoryUpsertCache[key] = cache
		imgCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single ImgCategory record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ImgCategory) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single ImgCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ImgCategory) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no ImgCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), imgCategoryPrimaryKeyMapping)
	sql := "DELETE FROM \"img_categories\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from img_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for img_categories")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q imgCategoryQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q imgCategoryQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no imgCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from img_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for img_categories")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ImgCategorySlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ImgCategorySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(imgCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), imgCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"img_categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, imgCategoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from imgCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for img_categories")
	}

	if len(imgCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ImgCategory) ReloadG() error {
	if o == nil {
		return errors.New("orm: no ImgCategory provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ImgCategory) Reload(exec boil.Executor) error {
	ret, err := FindImgCategory(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ImgCategorySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("orm: empty ImgCategorySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ImgCategorySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ImgCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), imgCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"img_categories\".* FROM \"img_categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, imgCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in ImgCategorySlice")
	}

	*o = slice

	return nil
}

// ImgCategoryExistsG checks if the ImgCategory row exists.
func ImgCategoryExistsG(iD string) (bool, error) {
	return ImgCategoryExists(boil.GetDB(), iD)
}

// ImgCategoryExists checks if the ImgCategory row exists.
func ImgCategoryExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"img_categories\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if img_categories exists")
	}

	return exists, nil
}

// Exists checks if the ImgCategory row exists.
func (o *ImgCategory) Exists(exec boil.Executor) (bool, error) {
	return ImgCategoryExists(exec, o.ID)
}
