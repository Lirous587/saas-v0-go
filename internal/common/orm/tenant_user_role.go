// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// TenantUserRole is an object representing the database table.
type TenantUserRole struct {
	UserID   int64 `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	TenantID int64 `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	RoleID   int64 `boil:"role_id" json:"role_id" toml:"role_id" yaml:"role_id"`

	R *tenantUserRoleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tenantUserRoleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TenantUserRoleColumns = struct {
	UserID   string
	TenantID string
	RoleID   string
}{
	UserID:   "user_id",
	TenantID: "tenant_id",
	RoleID:   "role_id",
}

var TenantUserRoleTableColumns = struct {
	UserID   string
	TenantID string
	RoleID   string
}{
	UserID:   "tenant_user_role.user_id",
	TenantID: "tenant_user_role.tenant_id",
	RoleID:   "tenant_user_role.role_id",
}

// Generated where

var TenantUserRoleWhere = struct {
	UserID   whereHelperint64
	TenantID whereHelperint64
	RoleID   whereHelperint64
}{
	UserID:   whereHelperint64{field: "\"tenant_user_role\".\"user_id\""},
	TenantID: whereHelperint64{field: "\"tenant_user_role\".\"tenant_id\""},
	RoleID:   whereHelperint64{field: "\"tenant_user_role\".\"role_id\""},
}

// TenantUserRoleRels is where relationship names are stored.
var TenantUserRoleRels = struct {
	Role   string
	Tenant string
	User   string
}{
	Role:   "Role",
	Tenant: "Tenant",
	User:   "User",
}

// tenantUserRoleR is where relationships are stored.
type tenantUserRoleR struct {
	Role   *Role   `boil:"Role" json:"Role" toml:"Role" yaml:"Role"`
	Tenant *Tenant `boil:"Tenant" json:"Tenant" toml:"Tenant" yaml:"Tenant"`
	User   *User   `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*tenantUserRoleR) NewStruct() *tenantUserRoleR {
	return &tenantUserRoleR{}
}

func (o *TenantUserRole) GetRole() *Role {
	if o == nil {
		return nil
	}

	return o.R.GetRole()
}

func (r *tenantUserRoleR) GetRole() *Role {
	if r == nil {
		return nil
	}

	return r.Role
}

func (o *TenantUserRole) GetTenant() *Tenant {
	if o == nil {
		return nil
	}

	return o.R.GetTenant()
}

func (r *tenantUserRoleR) GetTenant() *Tenant {
	if r == nil {
		return nil
	}

	return r.Tenant
}

func (o *TenantUserRole) GetUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetUser()
}

func (r *tenantUserRoleR) GetUser() *User {
	if r == nil {
		return nil
	}

	return r.User
}

// tenantUserRoleL is where Load methods for each relationship are stored.
type tenantUserRoleL struct{}

var (
	tenantUserRoleAllColumns            = []string{"user_id", "tenant_id", "role_id"}
	tenantUserRoleColumnsWithoutDefault = []string{"user_id", "tenant_id", "role_id"}
	tenantUserRoleColumnsWithDefault    = []string{}
	tenantUserRolePrimaryKeyColumns     = []string{"user_id", "tenant_id"}
	tenantUserRoleGeneratedColumns      = []string{}
)

type (
	// TenantUserRoleSlice is an alias for a slice of pointers to TenantUserRole.
	// This should almost always be used instead of []TenantUserRole.
	TenantUserRoleSlice []*TenantUserRole
	// TenantUserRoleHook is the signature for custom TenantUserRole hook methods
	TenantUserRoleHook func(boil.Executor, *TenantUserRole) error

	tenantUserRoleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tenantUserRoleType                 = reflect.TypeOf(&TenantUserRole{})
	tenantUserRoleMapping              = queries.MakeStructMapping(tenantUserRoleType)
	tenantUserRolePrimaryKeyMapping, _ = queries.BindMapping(tenantUserRoleType, tenantUserRoleMapping, tenantUserRolePrimaryKeyColumns)
	tenantUserRoleInsertCacheMut       sync.RWMutex
	tenantUserRoleInsertCache          = make(map[string]insertCache)
	tenantUserRoleUpdateCacheMut       sync.RWMutex
	tenantUserRoleUpdateCache          = make(map[string]updateCache)
	tenantUserRoleUpsertCacheMut       sync.RWMutex
	tenantUserRoleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tenantUserRoleAfterSelectMu sync.Mutex
var tenantUserRoleAfterSelectHooks []TenantUserRoleHook

var tenantUserRoleBeforeInsertMu sync.Mutex
var tenantUserRoleBeforeInsertHooks []TenantUserRoleHook
var tenantUserRoleAfterInsertMu sync.Mutex
var tenantUserRoleAfterInsertHooks []TenantUserRoleHook

var tenantUserRoleBeforeUpdateMu sync.Mutex
var tenantUserRoleBeforeUpdateHooks []TenantUserRoleHook
var tenantUserRoleAfterUpdateMu sync.Mutex
var tenantUserRoleAfterUpdateHooks []TenantUserRoleHook

var tenantUserRoleBeforeDeleteMu sync.Mutex
var tenantUserRoleBeforeDeleteHooks []TenantUserRoleHook
var tenantUserRoleAfterDeleteMu sync.Mutex
var tenantUserRoleAfterDeleteHooks []TenantUserRoleHook

var tenantUserRoleBeforeUpsertMu sync.Mutex
var tenantUserRoleBeforeUpsertHooks []TenantUserRoleHook
var tenantUserRoleAfterUpsertMu sync.Mutex
var tenantUserRoleAfterUpsertHooks []TenantUserRoleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TenantUserRole) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantUserRoleAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TenantUserRole) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantUserRoleBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TenantUserRole) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantUserRoleAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TenantUserRole) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantUserRoleBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TenantUserRole) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantUserRoleAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TenantUserRole) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantUserRoleBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TenantUserRole) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantUserRoleAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TenantUserRole) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantUserRoleBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TenantUserRole) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantUserRoleAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTenantUserRoleHook registers your hook function for all future operations.
func AddTenantUserRoleHook(hookPoint boil.HookPoint, tenantUserRoleHook TenantUserRoleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tenantUserRoleAfterSelectMu.Lock()
		tenantUserRoleAfterSelectHooks = append(tenantUserRoleAfterSelectHooks, tenantUserRoleHook)
		tenantUserRoleAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		tenantUserRoleBeforeInsertMu.Lock()
		tenantUserRoleBeforeInsertHooks = append(tenantUserRoleBeforeInsertHooks, tenantUserRoleHook)
		tenantUserRoleBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		tenantUserRoleAfterInsertMu.Lock()
		tenantUserRoleAfterInsertHooks = append(tenantUserRoleAfterInsertHooks, tenantUserRoleHook)
		tenantUserRoleAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		tenantUserRoleBeforeUpdateMu.Lock()
		tenantUserRoleBeforeUpdateHooks = append(tenantUserRoleBeforeUpdateHooks, tenantUserRoleHook)
		tenantUserRoleBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		tenantUserRoleAfterUpdateMu.Lock()
		tenantUserRoleAfterUpdateHooks = append(tenantUserRoleAfterUpdateHooks, tenantUserRoleHook)
		tenantUserRoleAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		tenantUserRoleBeforeDeleteMu.Lock()
		tenantUserRoleBeforeDeleteHooks = append(tenantUserRoleBeforeDeleteHooks, tenantUserRoleHook)
		tenantUserRoleBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		tenantUserRoleAfterDeleteMu.Lock()
		tenantUserRoleAfterDeleteHooks = append(tenantUserRoleAfterDeleteHooks, tenantUserRoleHook)
		tenantUserRoleAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		tenantUserRoleBeforeUpsertMu.Lock()
		tenantUserRoleBeforeUpsertHooks = append(tenantUserRoleBeforeUpsertHooks, tenantUserRoleHook)
		tenantUserRoleBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		tenantUserRoleAfterUpsertMu.Lock()
		tenantUserRoleAfterUpsertHooks = append(tenantUserRoleAfterUpsertHooks, tenantUserRoleHook)
		tenantUserRoleAfterUpsertMu.Unlock()
	}
}

// OneG returns a single tenantUserRole record from the query using the global executor.
func (q tenantUserRoleQuery) OneG() (*TenantUserRole, error) {
	return q.One(boil.GetDB())
}

// One returns a single tenantUserRole record from the query.
func (q tenantUserRoleQuery) One(exec boil.Executor) (*TenantUserRole, error) {
	o := &TenantUserRole{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for tenant_user_role")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TenantUserRole records from the query using the global executor.
func (q tenantUserRoleQuery) AllG() (TenantUserRoleSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all TenantUserRole records from the query.
func (q tenantUserRoleQuery) All(exec boil.Executor) (TenantUserRoleSlice, error) {
	var o []*TenantUserRole

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to TenantUserRole slice")
	}

	if len(tenantUserRoleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TenantUserRole records in the query using the global executor
func (q tenantUserRoleQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all TenantUserRole records in the query.
func (q tenantUserRoleQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count tenant_user_role rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q tenantUserRoleQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q tenantUserRoleQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if tenant_user_role exists")
	}

	return count > 0, nil
}

// Role pointed to by the foreign key.
func (o *TenantUserRole) Role(mods ...qm.QueryMod) roleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RoleID),
	}

	queryMods = append(queryMods, mods...)

	return Roles(queryMods...)
}

// Tenant pointed to by the foreign key.
func (o *TenantUserRole) Tenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TenantID),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// User pointed to by the foreign key.
func (o *TenantUserRole) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadRole allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tenantUserRoleL) LoadRole(e boil.Executor, singular bool, maybeTenantUserRole interface{}, mods queries.Applicator) error {
	var slice []*TenantUserRole
	var object *TenantUserRole

	if singular {
		var ok bool
		object, ok = maybeTenantUserRole.(*TenantUserRole)
		if !ok {
			object = new(TenantUserRole)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenantUserRole)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenantUserRole))
			}
		}
	} else {
		s, ok := maybeTenantUserRole.(*[]*TenantUserRole)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenantUserRole)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenantUserRole))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tenantUserRoleR{}
		}
		args[object.RoleID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantUserRoleR{}
			}

			args[obj.RoleID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`roles`),
		qm.WhereIn(`roles.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Role")
	}

	var resultSlice []*Role
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Role")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for roles")
	}

	if len(roleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Role = foreign
		if foreign.R == nil {
			foreign.R = &roleR{}
		}
		foreign.R.TenantUserRoles = append(foreign.R.TenantUserRoles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoleID == foreign.ID {
				local.R.Role = foreign
				if foreign.R == nil {
					foreign.R = &roleR{}
				}
				foreign.R.TenantUserRoles = append(foreign.R.TenantUserRoles, local)
				break
			}
		}
	}

	return nil
}

// LoadTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tenantUserRoleL) LoadTenant(e boil.Executor, singular bool, maybeTenantUserRole interface{}, mods queries.Applicator) error {
	var slice []*TenantUserRole
	var object *TenantUserRole

	if singular {
		var ok bool
		object, ok = maybeTenantUserRole.(*TenantUserRole)
		if !ok {
			object = new(TenantUserRole)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenantUserRole)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenantUserRole))
			}
		}
	} else {
		s, ok := maybeTenantUserRole.(*[]*TenantUserRole)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenantUserRole)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenantUserRole))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tenantUserRoleR{}
		}
		args[object.TenantID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantUserRoleR{}
			}

			args[obj.TenantID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.TenantUserRole = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TenantID == foreign.ID {
				local.R.Tenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.TenantUserRole = local
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tenantUserRoleL) LoadUser(e boil.Executor, singular bool, maybeTenantUserRole interface{}, mods queries.Applicator) error {
	var slice []*TenantUserRole
	var object *TenantUserRole

	if singular {
		var ok bool
		object, ok = maybeTenantUserRole.(*TenantUserRole)
		if !ok {
			object = new(TenantUserRole)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenantUserRole)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenantUserRole))
			}
		}
	} else {
		s, ok := maybeTenantUserRole.(*[]*TenantUserRole)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenantUserRole)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenantUserRole))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tenantUserRoleR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantUserRoleR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.TenantUserRoles = append(foreign.R.TenantUserRoles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.TenantUserRoles = append(foreign.R.TenantUserRoles, local)
				break
			}
		}
	}

	return nil
}

// SetRoleG of the tenantUserRole to the related item.
// Sets o.R.Role to related.
// Adds o to related.R.TenantUserRoles.
// Uses the global database handle.
func (o *TenantUserRole) SetRoleG(insert bool, related *Role) error {
	return o.SetRole(boil.GetDB(), insert, related)
}

// SetRole of the tenantUserRole to the related item.
// Sets o.R.Role to related.
// Adds o to related.R.TenantUserRoles.
func (o *TenantUserRole) SetRole(exec boil.Executor, insert bool, related *Role) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tenant_user_role\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"role_id"}),
		strmangle.WhereClause("\"", "\"", 2, tenantUserRolePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.TenantID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoleID = related.ID
	if o.R == nil {
		o.R = &tenantUserRoleR{
			Role: related,
		}
	} else {
		o.R.Role = related
	}

	if related.R == nil {
		related.R = &roleR{
			TenantUserRoles: TenantUserRoleSlice{o},
		}
	} else {
		related.R.TenantUserRoles = append(related.R.TenantUserRoles, o)
	}

	return nil
}

// SetTenantG of the tenantUserRole to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.TenantUserRole.
// Uses the global database handle.
func (o *TenantUserRole) SetTenantG(insert bool, related *Tenant) error {
	return o.SetTenant(boil.GetDB(), insert, related)
}

// SetTenant of the tenantUserRole to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.TenantUserRole.
func (o *TenantUserRole) SetTenant(exec boil.Executor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tenant_user_role\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
		strmangle.WhereClause("\"", "\"", 2, tenantUserRolePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.TenantID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TenantID = related.ID
	if o.R == nil {
		o.R = &tenantUserRoleR{
			Tenant: related,
		}
	} else {
		o.R.Tenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			TenantUserRole: o,
		}
	} else {
		related.R.TenantUserRole = o
	}

	return nil
}

// SetUserG of the tenantUserRole to the related item.
// Sets o.R.User to related.
// Adds o to related.R.TenantUserRoles.
// Uses the global database handle.
func (o *TenantUserRole) SetUserG(insert bool, related *User) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUser of the tenantUserRole to the related item.
// Sets o.R.User to related.
// Adds o to related.R.TenantUserRoles.
func (o *TenantUserRole) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tenant_user_role\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, tenantUserRolePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.TenantID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &tenantUserRoleR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			TenantUserRoles: TenantUserRoleSlice{o},
		}
	} else {
		related.R.TenantUserRoles = append(related.R.TenantUserRoles, o)
	}

	return nil
}

// TenantUserRoles retrieves all the records using an executor.
func TenantUserRoles(mods ...qm.QueryMod) tenantUserRoleQuery {
	mods = append(mods, qm.From("\"tenant_user_role\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tenant_user_role\".*"})
	}

	return tenantUserRoleQuery{q}
}

// FindTenantUserRoleG retrieves a single record by ID.
func FindTenantUserRoleG(userID int64, tenantID int64, selectCols ...string) (*TenantUserRole, error) {
	return FindTenantUserRole(boil.GetDB(), userID, tenantID, selectCols...)
}

// FindTenantUserRole retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTenantUserRole(exec boil.Executor, userID int64, tenantID int64, selectCols ...string) (*TenantUserRole, error) {
	tenantUserRoleObj := &TenantUserRole{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tenant_user_role\" where \"user_id\"=$1 AND \"tenant_id\"=$2", sel,
	)

	q := queries.Raw(query, userID, tenantID)

	err := q.Bind(nil, exec, tenantUserRoleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from tenant_user_role")
	}

	if err = tenantUserRoleObj.doAfterSelectHooks(exec); err != nil {
		return tenantUserRoleObj, err
	}

	return tenantUserRoleObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TenantUserRole) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TenantUserRole) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no tenant_user_role provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tenantUserRoleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tenantUserRoleInsertCacheMut.RLock()
	cache, cached := tenantUserRoleInsertCache[key]
	tenantUserRoleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tenantUserRoleAllColumns,
			tenantUserRoleColumnsWithDefault,
			tenantUserRoleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tenantUserRoleType, tenantUserRoleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tenantUserRoleType, tenantUserRoleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tenant_user_role\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tenant_user_role\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into tenant_user_role")
	}

	if !cached {
		tenantUserRoleInsertCacheMut.Lock()
		tenantUserRoleInsertCache[key] = cache
		tenantUserRoleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single TenantUserRole record using the global executor.
// See Update for more documentation.
func (o *TenantUserRole) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the TenantUserRole.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TenantUserRole) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tenantUserRoleUpdateCacheMut.RLock()
	cache, cached := tenantUserRoleUpdateCache[key]
	tenantUserRoleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tenantUserRoleAllColumns,
			tenantUserRolePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update tenant_user_role, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tenant_user_role\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tenantUserRolePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tenantUserRoleType, tenantUserRoleMapping, append(wl, tenantUserRolePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update tenant_user_role row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for tenant_user_role")
	}

	if !cached {
		tenantUserRoleUpdateCacheMut.Lock()
		tenantUserRoleUpdateCache[key] = cache
		tenantUserRoleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q tenantUserRoleQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q tenantUserRoleQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for tenant_user_role")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for tenant_user_role")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TenantUserRoleSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TenantUserRoleSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantUserRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tenant_user_role\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tenantUserRolePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in tenantUserRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all tenantUserRole")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TenantUserRole) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TenantUserRole) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no tenant_user_role provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tenantUserRoleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tenantUserRoleUpsertCacheMut.RLock()
	cache, cached := tenantUserRoleUpsertCache[key]
	tenantUserRoleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			tenantUserRoleAllColumns,
			tenantUserRoleColumnsWithDefault,
			tenantUserRoleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tenantUserRoleAllColumns,
			tenantUserRolePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert tenant_user_role, could not build update column list")
		}

		ret := strmangle.SetComplement(tenantUserRoleAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(tenantUserRolePrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert tenant_user_role, could not build conflict column list")
			}

			conflict = make([]string, len(tenantUserRolePrimaryKeyColumns))
			copy(conflict, tenantUserRolePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tenant_user_role\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(tenantUserRoleType, tenantUserRoleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tenantUserRoleType, tenantUserRoleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert tenant_user_role")
	}

	if !cached {
		tenantUserRoleUpsertCacheMut.Lock()
		tenantUserRoleUpsertCache[key] = cache
		tenantUserRoleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single TenantUserRole record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TenantUserRole) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single TenantUserRole record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TenantUserRole) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no TenantUserRole provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tenantUserRolePrimaryKeyMapping)
	sql := "DELETE FROM \"tenant_user_role\" WHERE \"user_id\"=$1 AND \"tenant_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from tenant_user_role")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for tenant_user_role")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q tenantUserRoleQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q tenantUserRoleQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no tenantUserRoleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from tenant_user_role")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for tenant_user_role")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TenantUserRoleSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TenantUserRoleSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tenantUserRoleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantUserRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tenant_user_role\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tenantUserRolePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from tenantUserRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for tenant_user_role")
	}

	if len(tenantUserRoleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TenantUserRole) ReloadG() error {
	if o == nil {
		return errors.New("orm: no TenantUserRole provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TenantUserRole) Reload(exec boil.Executor) error {
	ret, err := FindTenantUserRole(exec, o.UserID, o.TenantID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TenantUserRoleSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("orm: empty TenantUserRoleSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TenantUserRoleSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TenantUserRoleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantUserRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tenant_user_role\".* FROM \"tenant_user_role\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tenantUserRolePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in TenantUserRoleSlice")
	}

	*o = slice

	return nil
}

// TenantUserRoleExistsG checks if the TenantUserRole row exists.
func TenantUserRoleExistsG(userID int64, tenantID int64) (bool, error) {
	return TenantUserRoleExists(boil.GetDB(), userID, tenantID)
}

// TenantUserRoleExists checks if the TenantUserRole row exists.
func TenantUserRoleExists(exec boil.Executor, userID int64, tenantID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tenant_user_role\" where \"user_id\"=$1 AND \"tenant_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, userID, tenantID)
	}
	row := exec.QueryRow(sql, userID, tenantID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if tenant_user_role exists")
	}

	return exists, nil
}

// Exists checks if the TenantUserRole row exists.
func (o *TenantUserRole) Exists(exec boil.Executor) (bool, error) {
	return TenantUserRoleExists(exec, o.UserID, o.TenantID)
}
