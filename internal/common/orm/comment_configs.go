// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// CommentConfig is an object representing the database table.
type CommentConfig struct {
	TenantID  int64     `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	Plate     string    `boil:"plate" json:"plate" toml:"plate" yaml:"plate"`
	IfAudit   bool      `boil:"if_audit" json:"if_audit" toml:"if_audit" yaml:"if_audit"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *commentConfigR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L commentConfigL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CommentConfigColumns = struct {
	TenantID  string
	Plate     string
	IfAudit   string
	CreatedAt string
	UpdatedAt string
}{
	TenantID:  "tenant_id",
	Plate:     "plate",
	IfAudit:   "if_audit",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var CommentConfigTableColumns = struct {
	TenantID  string
	Plate     string
	IfAudit   string
	CreatedAt string
	UpdatedAt string
}{
	TenantID:  "comment_configs.tenant_id",
	Plate:     "comment_configs.plate",
	IfAudit:   "comment_configs.if_audit",
	CreatedAt: "comment_configs.created_at",
	UpdatedAt: "comment_configs.updated_at",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CommentConfigWhere = struct {
	TenantID  whereHelperint64
	Plate     whereHelperstring
	IfAudit   whereHelperbool
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	TenantID:  whereHelperint64{field: "\"comment_configs\".\"tenant_id\""},
	Plate:     whereHelperstring{field: "\"comment_configs\".\"plate\""},
	IfAudit:   whereHelperbool{field: "\"comment_configs\".\"if_audit\""},
	CreatedAt: whereHelpertime_Time{field: "\"comment_configs\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"comment_configs\".\"updated_at\""},
}

// CommentConfigRels is where relationship names are stored.
var CommentConfigRels = struct {
	Tenant string
}{
	Tenant: "Tenant",
}

// commentConfigR is where relationships are stored.
type commentConfigR struct {
	Tenant *Tenant `boil:"Tenant" json:"Tenant" toml:"Tenant" yaml:"Tenant"`
}

// NewStruct creates a new relationship struct
func (*commentConfigR) NewStruct() *commentConfigR {
	return &commentConfigR{}
}

func (o *CommentConfig) GetTenant() *Tenant {
	if o == nil {
		return nil
	}

	return o.R.GetTenant()
}

func (r *commentConfigR) GetTenant() *Tenant {
	if r == nil {
		return nil
	}

	return r.Tenant
}

// commentConfigL is where Load methods for each relationship are stored.
type commentConfigL struct{}

var (
	commentConfigAllColumns            = []string{"tenant_id", "plate", "if_audit", "created_at", "updated_at"}
	commentConfigColumnsWithoutDefault = []string{"tenant_id", "plate"}
	commentConfigColumnsWithDefault    = []string{"if_audit", "created_at", "updated_at"}
	commentConfigPrimaryKeyColumns     = []string{"tenant_id", "plate"}
	commentConfigGeneratedColumns      = []string{}
)

type (
	// CommentConfigSlice is an alias for a slice of pointers to CommentConfig.
	// This should almost always be used instead of []CommentConfig.
	CommentConfigSlice []*CommentConfig
	// CommentConfigHook is the signature for custom CommentConfig hook methods
	CommentConfigHook func(boil.Executor, *CommentConfig) error

	commentConfigQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	commentConfigType                 = reflect.TypeOf(&CommentConfig{})
	commentConfigMapping              = queries.MakeStructMapping(commentConfigType)
	commentConfigPrimaryKeyMapping, _ = queries.BindMapping(commentConfigType, commentConfigMapping, commentConfigPrimaryKeyColumns)
	commentConfigInsertCacheMut       sync.RWMutex
	commentConfigInsertCache          = make(map[string]insertCache)
	commentConfigUpdateCacheMut       sync.RWMutex
	commentConfigUpdateCache          = make(map[string]updateCache)
	commentConfigUpsertCacheMut       sync.RWMutex
	commentConfigUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var commentConfigAfterSelectMu sync.Mutex
var commentConfigAfterSelectHooks []CommentConfigHook

var commentConfigBeforeInsertMu sync.Mutex
var commentConfigBeforeInsertHooks []CommentConfigHook
var commentConfigAfterInsertMu sync.Mutex
var commentConfigAfterInsertHooks []CommentConfigHook

var commentConfigBeforeUpdateMu sync.Mutex
var commentConfigBeforeUpdateHooks []CommentConfigHook
var commentConfigAfterUpdateMu sync.Mutex
var commentConfigAfterUpdateHooks []CommentConfigHook

var commentConfigBeforeDeleteMu sync.Mutex
var commentConfigBeforeDeleteHooks []CommentConfigHook
var commentConfigAfterDeleteMu sync.Mutex
var commentConfigAfterDeleteHooks []CommentConfigHook

var commentConfigBeforeUpsertMu sync.Mutex
var commentConfigBeforeUpsertHooks []CommentConfigHook
var commentConfigAfterUpsertMu sync.Mutex
var commentConfigAfterUpsertHooks []CommentConfigHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CommentConfig) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range commentConfigAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CommentConfig) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range commentConfigBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CommentConfig) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range commentConfigAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CommentConfig) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range commentConfigBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CommentConfig) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range commentConfigAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CommentConfig) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range commentConfigBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CommentConfig) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range commentConfigAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CommentConfig) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range commentConfigBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CommentConfig) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range commentConfigAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCommentConfigHook registers your hook function for all future operations.
func AddCommentConfigHook(hookPoint boil.HookPoint, commentConfigHook CommentConfigHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		commentConfigAfterSelectMu.Lock()
		commentConfigAfterSelectHooks = append(commentConfigAfterSelectHooks, commentConfigHook)
		commentConfigAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		commentConfigBeforeInsertMu.Lock()
		commentConfigBeforeInsertHooks = append(commentConfigBeforeInsertHooks, commentConfigHook)
		commentConfigBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		commentConfigAfterInsertMu.Lock()
		commentConfigAfterInsertHooks = append(commentConfigAfterInsertHooks, commentConfigHook)
		commentConfigAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		commentConfigBeforeUpdateMu.Lock()
		commentConfigBeforeUpdateHooks = append(commentConfigBeforeUpdateHooks, commentConfigHook)
		commentConfigBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		commentConfigAfterUpdateMu.Lock()
		commentConfigAfterUpdateHooks = append(commentConfigAfterUpdateHooks, commentConfigHook)
		commentConfigAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		commentConfigBeforeDeleteMu.Lock()
		commentConfigBeforeDeleteHooks = append(commentConfigBeforeDeleteHooks, commentConfigHook)
		commentConfigBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		commentConfigAfterDeleteMu.Lock()
		commentConfigAfterDeleteHooks = append(commentConfigAfterDeleteHooks, commentConfigHook)
		commentConfigAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		commentConfigBeforeUpsertMu.Lock()
		commentConfigBeforeUpsertHooks = append(commentConfigBeforeUpsertHooks, commentConfigHook)
		commentConfigBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		commentConfigAfterUpsertMu.Lock()
		commentConfigAfterUpsertHooks = append(commentConfigAfterUpsertHooks, commentConfigHook)
		commentConfigAfterUpsertMu.Unlock()
	}
}

// OneG returns a single commentConfig record from the query using the global executor.
func (q commentConfigQuery) OneG() (*CommentConfig, error) {
	return q.One(boil.GetDB())
}

// One returns a single commentConfig record from the query.
func (q commentConfigQuery) One(exec boil.Executor) (*CommentConfig, error) {
	o := &CommentConfig{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for comment_configs")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all CommentConfig records from the query using the global executor.
func (q commentConfigQuery) AllG() (CommentConfigSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all CommentConfig records from the query.
func (q commentConfigQuery) All(exec boil.Executor) (CommentConfigSlice, error) {
	var o []*CommentConfig

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to CommentConfig slice")
	}

	if len(commentConfigAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all CommentConfig records in the query using the global executor
func (q commentConfigQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all CommentConfig records in the query.
func (q commentConfigQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count comment_configs rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q commentConfigQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q commentConfigQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if comment_configs exists")
	}

	return count > 0, nil
}

// Tenant pointed to by the foreign key.
func (o *CommentConfig) Tenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TenantID),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// LoadTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (commentConfigL) LoadTenant(e boil.Executor, singular bool, maybeCommentConfig interface{}, mods queries.Applicator) error {
	var slice []*CommentConfig
	var object *CommentConfig

	if singular {
		var ok bool
		object, ok = maybeCommentConfig.(*CommentConfig)
		if !ok {
			object = new(CommentConfig)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCommentConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCommentConfig))
			}
		}
	} else {
		s, ok := maybeCommentConfig.(*[]*CommentConfig)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCommentConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCommentConfig))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &commentConfigR{}
		}
		args[object.TenantID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &commentConfigR{}
			}

			args[obj.TenantID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.CommentConfigs = append(foreign.R.CommentConfigs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TenantID == foreign.ID {
				local.R.Tenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.CommentConfigs = append(foreign.R.CommentConfigs, local)
				break
			}
		}
	}

	return nil
}

// SetTenantG of the commentConfig to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.CommentConfigs.
// Uses the global database handle.
func (o *CommentConfig) SetTenantG(insert bool, related *Tenant) error {
	return o.SetTenant(boil.GetDB(), insert, related)
}

// SetTenant of the commentConfig to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.CommentConfigs.
func (o *CommentConfig) SetTenant(exec boil.Executor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"comment_configs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
		strmangle.WhereClause("\"", "\"", 2, commentConfigPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.TenantID, o.Plate}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TenantID = related.ID
	if o.R == nil {
		o.R = &commentConfigR{
			Tenant: related,
		}
	} else {
		o.R.Tenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			CommentConfigs: CommentConfigSlice{o},
		}
	} else {
		related.R.CommentConfigs = append(related.R.CommentConfigs, o)
	}

	return nil
}

// CommentConfigs retrieves all the records using an executor.
func CommentConfigs(mods ...qm.QueryMod) commentConfigQuery {
	mods = append(mods, qm.From("\"comment_configs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"comment_configs\".*"})
	}

	return commentConfigQuery{q}
}

// FindCommentConfigG retrieves a single record by ID.
func FindCommentConfigG(tenantID int64, plate string, selectCols ...string) (*CommentConfig, error) {
	return FindCommentConfig(boil.GetDB(), tenantID, plate, selectCols...)
}

// FindCommentConfig retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCommentConfig(exec boil.Executor, tenantID int64, plate string, selectCols ...string) (*CommentConfig, error) {
	commentConfigObj := &CommentConfig{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"comment_configs\" where \"tenant_id\"=$1 AND \"plate\"=$2", sel,
	)

	q := queries.Raw(query, tenantID, plate)

	err := q.Bind(nil, exec, commentConfigObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from comment_configs")
	}

	if err = commentConfigObj.doAfterSelectHooks(exec); err != nil {
		return commentConfigObj, err
	}

	return commentConfigObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CommentConfig) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CommentConfig) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no comment_configs provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(commentConfigColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	commentConfigInsertCacheMut.RLock()
	cache, cached := commentConfigInsertCache[key]
	commentConfigInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			commentConfigAllColumns,
			commentConfigColumnsWithDefault,
			commentConfigColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(commentConfigType, commentConfigMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(commentConfigType, commentConfigMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"comment_configs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"comment_configs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into comment_configs")
	}

	if !cached {
		commentConfigInsertCacheMut.Lock()
		commentConfigInsertCache[key] = cache
		commentConfigInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single CommentConfig record using the global executor.
// See Update for more documentation.
func (o *CommentConfig) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the CommentConfig.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CommentConfig) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	commentConfigUpdateCacheMut.RLock()
	cache, cached := commentConfigUpdateCache[key]
	commentConfigUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			commentConfigAllColumns,
			commentConfigPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update comment_configs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"comment_configs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, commentConfigPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(commentConfigType, commentConfigMapping, append(wl, commentConfigPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update comment_configs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for comment_configs")
	}

	if !cached {
		commentConfigUpdateCacheMut.Lock()
		commentConfigUpdateCache[key] = cache
		commentConfigUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q commentConfigQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q commentConfigQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for comment_configs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for comment_configs")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CommentConfigSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CommentConfigSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"comment_configs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, commentConfigPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in commentConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all commentConfig")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CommentConfig) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CommentConfig) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no comment_configs provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(commentConfigColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	commentConfigUpsertCacheMut.RLock()
	cache, cached := commentConfigUpsertCache[key]
	commentConfigUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			commentConfigAllColumns,
			commentConfigColumnsWithDefault,
			commentConfigColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			commentConfigAllColumns,
			commentConfigPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert comment_configs, could not build update column list")
		}

		ret := strmangle.SetComplement(commentConfigAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(commentConfigPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert comment_configs, could not build conflict column list")
			}

			conflict = make([]string, len(commentConfigPrimaryKeyColumns))
			copy(conflict, commentConfigPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"comment_configs\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(commentConfigType, commentConfigMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(commentConfigType, commentConfigMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert comment_configs")
	}

	if !cached {
		commentConfigUpsertCacheMut.Lock()
		commentConfigUpsertCache[key] = cache
		commentConfigUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single CommentConfig record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CommentConfig) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single CommentConfig record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CommentConfig) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no CommentConfig provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), commentConfigPrimaryKeyMapping)
	sql := "DELETE FROM \"comment_configs\" WHERE \"tenant_id\"=$1 AND \"plate\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from comment_configs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for comment_configs")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q commentConfigQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q commentConfigQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no commentConfigQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from comment_configs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for comment_configs")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CommentConfigSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CommentConfigSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(commentConfigBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"comment_configs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, commentConfigPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from commentConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for comment_configs")
	}

	if len(commentConfigAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CommentConfig) ReloadG() error {
	if o == nil {
		return errors.New("orm: no CommentConfig provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CommentConfig) Reload(exec boil.Executor) error {
	ret, err := FindCommentConfig(exec, o.TenantID, o.Plate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommentConfigSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("orm: empty CommentConfigSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommentConfigSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CommentConfigSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"comment_configs\".* FROM \"comment_configs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, commentConfigPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in CommentConfigSlice")
	}

	*o = slice

	return nil
}

// CommentConfigExistsG checks if the CommentConfig row exists.
func CommentConfigExistsG(tenantID int64, plate string) (bool, error) {
	return CommentConfigExists(boil.GetDB(), tenantID, plate)
}

// CommentConfigExists checks if the CommentConfig row exists.
func CommentConfigExists(exec boil.Executor, tenantID int64, plate string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"comment_configs\" where \"tenant_id\"=$1 AND \"plate\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, tenantID, plate)
	}
	row := exec.QueryRow(sql, tenantID, plate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if comment_configs exists")
	}

	return exists, nil
}

// Exists checks if the CommentConfig row exists.
func (o *CommentConfig) Exists(exec boil.Executor) (bool, error) {
	return CommentConfigExists(exec, o.TenantID, o.Plate)
}
