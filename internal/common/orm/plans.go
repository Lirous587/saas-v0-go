// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
)

// Plan is an object representing the database table.
type Plan struct {
	ID          int64           `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        string          `boil:"name" json:"name" toml:"name" yaml:"name"`
	Price       decimal.Decimal `boil:"price" json:"price" toml:"price" yaml:"price"`
	Description string          `boil:"description" json:"description" toml:"description" yaml:"description"`
	CreatedAt   time.Time       `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time       `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *planR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L planL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlanColumns = struct {
	ID          string
	Name        string
	Price       string
	Description string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	Name:        "name",
	Price:       "price",
	Description: "description",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var PlanTableColumns = struct {
	ID          string
	Name        string
	Price       string
	Description string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "plans.id",
	Name:        "plans.name",
	Price:       "plans.price",
	Description: "plans.description",
	CreatedAt:   "plans.created_at",
	UpdatedAt:   "plans.updated_at",
}

// Generated where

type whereHelperdecimal_Decimal struct{ field string }

func (w whereHelperdecimal_Decimal) EQ(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperdecimal_Decimal) NEQ(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperdecimal_Decimal) LT(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperdecimal_Decimal) LTE(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperdecimal_Decimal) GT(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperdecimal_Decimal) GTE(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var PlanWhere = struct {
	ID          whereHelperint64
	Name        whereHelperstring
	Price       whereHelperdecimal_Decimal
	Description whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint64{field: "\"plans\".\"id\""},
	Name:        whereHelperstring{field: "\"plans\".\"name\""},
	Price:       whereHelperdecimal_Decimal{field: "\"plans\".\"price\""},
	Description: whereHelperstring{field: "\"plans\".\"description\""},
	CreatedAt:   whereHelpertime_Time{field: "\"plans\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"plans\".\"updated_at\""},
}

// PlanRels is where relationship names are stored.
var PlanRels = struct {
	TenantPlans string
}{
	TenantPlans: "TenantPlans",
}

// planR is where relationships are stored.
type planR struct {
	TenantPlans TenantPlanSlice `boil:"TenantPlans" json:"TenantPlans" toml:"TenantPlans" yaml:"TenantPlans"`
}

// NewStruct creates a new relationship struct
func (*planR) NewStruct() *planR {
	return &planR{}
}

func (o *Plan) GetTenantPlans() TenantPlanSlice {
	if o == nil {
		return nil
	}

	return o.R.GetTenantPlans()
}

func (r *planR) GetTenantPlans() TenantPlanSlice {
	if r == nil {
		return nil
	}

	return r.TenantPlans
}

// planL is where Load methods for each relationship are stored.
type planL struct{}

var (
	planAllColumns            = []string{"id", "name", "price", "description", "created_at", "updated_at"}
	planColumnsWithoutDefault = []string{"name", "description"}
	planColumnsWithDefault    = []string{"id", "price", "created_at", "updated_at"}
	planPrimaryKeyColumns     = []string{"id"}
	planGeneratedColumns      = []string{}
)

type (
	// PlanSlice is an alias for a slice of pointers to Plan.
	// This should almost always be used instead of []Plan.
	PlanSlice []*Plan
	// PlanHook is the signature for custom Plan hook methods
	PlanHook func(boil.Executor, *Plan) error

	planQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	planType                 = reflect.TypeOf(&Plan{})
	planMapping              = queries.MakeStructMapping(planType)
	planPrimaryKeyMapping, _ = queries.BindMapping(planType, planMapping, planPrimaryKeyColumns)
	planInsertCacheMut       sync.RWMutex
	planInsertCache          = make(map[string]insertCache)
	planUpdateCacheMut       sync.RWMutex
	planUpdateCache          = make(map[string]updateCache)
	planUpsertCacheMut       sync.RWMutex
	planUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var planAfterSelectMu sync.Mutex
var planAfterSelectHooks []PlanHook

var planBeforeInsertMu sync.Mutex
var planBeforeInsertHooks []PlanHook
var planAfterInsertMu sync.Mutex
var planAfterInsertHooks []PlanHook

var planBeforeUpdateMu sync.Mutex
var planBeforeUpdateHooks []PlanHook
var planAfterUpdateMu sync.Mutex
var planAfterUpdateHooks []PlanHook

var planBeforeDeleteMu sync.Mutex
var planBeforeDeleteHooks []PlanHook
var planAfterDeleteMu sync.Mutex
var planAfterDeleteHooks []PlanHook

var planBeforeUpsertMu sync.Mutex
var planBeforeUpsertHooks []PlanHook
var planAfterUpsertMu sync.Mutex
var planAfterUpsertHooks []PlanHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Plan) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range planAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Plan) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range planBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Plan) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range planAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Plan) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range planBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Plan) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range planAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Plan) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range planBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Plan) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range planAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Plan) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range planBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Plan) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range planAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlanHook registers your hook function for all future operations.
func AddPlanHook(hookPoint boil.HookPoint, planHook PlanHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		planAfterSelectMu.Lock()
		planAfterSelectHooks = append(planAfterSelectHooks, planHook)
		planAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		planBeforeInsertMu.Lock()
		planBeforeInsertHooks = append(planBeforeInsertHooks, planHook)
		planBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		planAfterInsertMu.Lock()
		planAfterInsertHooks = append(planAfterInsertHooks, planHook)
		planAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		planBeforeUpdateMu.Lock()
		planBeforeUpdateHooks = append(planBeforeUpdateHooks, planHook)
		planBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		planAfterUpdateMu.Lock()
		planAfterUpdateHooks = append(planAfterUpdateHooks, planHook)
		planAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		planBeforeDeleteMu.Lock()
		planBeforeDeleteHooks = append(planBeforeDeleteHooks, planHook)
		planBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		planAfterDeleteMu.Lock()
		planAfterDeleteHooks = append(planAfterDeleteHooks, planHook)
		planAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		planBeforeUpsertMu.Lock()
		planBeforeUpsertHooks = append(planBeforeUpsertHooks, planHook)
		planBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		planAfterUpsertMu.Lock()
		planAfterUpsertHooks = append(planAfterUpsertHooks, planHook)
		planAfterUpsertMu.Unlock()
	}
}

// OneG returns a single plan record from the query using the global executor.
func (q planQuery) OneG() (*Plan, error) {
	return q.One(boil.GetDB())
}

// One returns a single plan record from the query.
func (q planQuery) One(exec boil.Executor) (*Plan, error) {
	o := &Plan{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for plans")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Plan records from the query using the global executor.
func (q planQuery) AllG() (PlanSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Plan records from the query.
func (q planQuery) All(exec boil.Executor) (PlanSlice, error) {
	var o []*Plan

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Plan slice")
	}

	if len(planAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Plan records in the query using the global executor
func (q planQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Plan records in the query.
func (q planQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count plans rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q planQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q planQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if plans exists")
	}

	return count > 0, nil
}

// TenantPlans retrieves all the tenant_plan's TenantPlans with an executor.
func (o *Plan) TenantPlans(mods ...qm.QueryMod) tenantPlanQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tenant_plan\".\"plan_id\"=?", o.ID),
	)

	return TenantPlans(queryMods...)
}

// LoadTenantPlans allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (planL) LoadTenantPlans(e boil.Executor, singular bool, maybePlan interface{}, mods queries.Applicator) error {
	var slice []*Plan
	var object *Plan

	if singular {
		var ok bool
		object, ok = maybePlan.(*Plan)
		if !ok {
			object = new(Plan)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlan)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlan))
			}
		}
	} else {
		s, ok := maybePlan.(*[]*Plan)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlan)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlan))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &planR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &planR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenant_plan`),
		qm.WhereIn(`tenant_plan.plan_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tenant_plan")
	}

	var resultSlice []*TenantPlan
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tenant_plan")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tenant_plan")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenant_plan")
	}

	if len(tenantPlanAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TenantPlans = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tenantPlanR{}
			}
			foreign.R.Plan = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PlanID {
				local.R.TenantPlans = append(local.R.TenantPlans, foreign)
				if foreign.R == nil {
					foreign.R = &tenantPlanR{}
				}
				foreign.R.Plan = local
				break
			}
		}
	}

	return nil
}

// AddTenantPlansG adds the given related objects to the existing relationships
// of the plan, optionally inserting them as new records.
// Appends related to o.R.TenantPlans.
// Sets related.R.Plan appropriately.
// Uses the global database handle.
func (o *Plan) AddTenantPlansG(insert bool, related ...*TenantPlan) error {
	return o.AddTenantPlans(boil.GetDB(), insert, related...)
}

// AddTenantPlans adds the given related objects to the existing relationships
// of the plan, optionally inserting them as new records.
// Appends related to o.R.TenantPlans.
// Sets related.R.Plan appropriately.
func (o *Plan) AddTenantPlans(exec boil.Executor, insert bool, related ...*TenantPlan) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlanID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tenant_plan\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"plan_id"}),
				strmangle.WhereClause("\"", "\"", 2, tenantPlanPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.TenantID, rel.PlanID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlanID = o.ID
		}
	}

	if o.R == nil {
		o.R = &planR{
			TenantPlans: related,
		}
	} else {
		o.R.TenantPlans = append(o.R.TenantPlans, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tenantPlanR{
				Plan: o,
			}
		} else {
			rel.R.Plan = o
		}
	}
	return nil
}

// Plans retrieves all the records using an executor.
func Plans(mods ...qm.QueryMod) planQuery {
	mods = append(mods, qm.From("\"plans\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"plans\".*"})
	}

	return planQuery{q}
}

// FindPlanG retrieves a single record by ID.
func FindPlanG(iD int64, selectCols ...string) (*Plan, error) {
	return FindPlan(boil.GetDB(), iD, selectCols...)
}

// FindPlan retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlan(exec boil.Executor, iD int64, selectCols ...string) (*Plan, error) {
	planObj := &Plan{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"plans\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, planObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from plans")
	}

	if err = planObj.doAfterSelectHooks(exec); err != nil {
		return planObj, err
	}

	return planObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Plan) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Plan) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no plans provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(planColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	planInsertCacheMut.RLock()
	cache, cached := planInsertCache[key]
	planInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			planAllColumns,
			planColumnsWithDefault,
			planColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(planType, planMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(planType, planMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"plans\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"plans\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into plans")
	}

	if !cached {
		planInsertCacheMut.Lock()
		planInsertCache[key] = cache
		planInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Plan record using the global executor.
// See Update for more documentation.
func (o *Plan) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Plan.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Plan) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	planUpdateCacheMut.RLock()
	cache, cached := planUpdateCache[key]
	planUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			planAllColumns,
			planPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update plans, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"plans\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, planPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(planType, planMapping, append(wl, planPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update plans row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for plans")
	}

	if !cached {
		planUpdateCacheMut.Lock()
		planUpdateCache[key] = cache
		planUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q planQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q planQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for plans")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for plans")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PlanSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlanSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"plans\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, planPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in plan slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all plan")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Plan) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Plan) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no plans provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(planColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	planUpsertCacheMut.RLock()
	cache, cached := planUpsertCache[key]
	planUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			planAllColumns,
			planColumnsWithDefault,
			planColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			planAllColumns,
			planPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert plans, could not build update column list")
		}

		ret := strmangle.SetComplement(planAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(planPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert plans, could not build conflict column list")
			}

			conflict = make([]string, len(planPrimaryKeyColumns))
			copy(conflict, planPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"plans\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(planType, planMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(planType, planMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert plans")
	}

	if !cached {
		planUpsertCacheMut.Lock()
		planUpsertCache[key] = cache
		planUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Plan record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Plan) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Plan record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Plan) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Plan provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), planPrimaryKeyMapping)
	sql := "DELETE FROM \"plans\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from plans")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for plans")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q planQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q planQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no planQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from plans")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for plans")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o PlanSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlanSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(planBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"plans\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, planPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from plan slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for plans")
	}

	if len(planAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Plan) ReloadG() error {
	if o == nil {
		return errors.New("orm: no Plan provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Plan) Reload(exec boil.Executor) error {
	ret, err := FindPlan(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlanSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("orm: empty PlanSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlanSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlanSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"plans\".* FROM \"plans\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, planPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in PlanSlice")
	}

	*o = slice

	return nil
}

// PlanExistsG checks if the Plan row exists.
func PlanExistsG(iD int64) (bool, error) {
	return PlanExists(boil.GetDB(), iD)
}

// PlanExists checks if the Plan row exists.
func PlanExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"plans\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if plans exists")
	}

	return exists, nil
}

// Exists checks if the Plan row exists.
func (o *Plan) Exists(exec boil.Executor) (bool, error) {
	return PlanExists(exec, o.ID)
}
