// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// CommentPlate is an object representing the database table.
type CommentPlate struct {
	ID          int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Plate       string      `boil:"plate" json:"plate" toml:"plate" yaml:"plate"`
	TenantID    int64       `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`

	R *commentPlateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L commentPlateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CommentPlateColumns = struct {
	ID          string
	Plate       string
	TenantID    string
	Description string
}{
	ID:          "id",
	Plate:       "plate",
	TenantID:    "tenant_id",
	Description: "description",
}

var CommentPlateTableColumns = struct {
	ID          string
	Plate       string
	TenantID    string
	Description string
}{
	ID:          "comment_plates.id",
	Plate:       "comment_plates.plate",
	TenantID:    "comment_plates.tenant_id",
	Description: "comment_plates.description",
}

// Generated where

var CommentPlateWhere = struct {
	ID          whereHelperint64
	Plate       whereHelperstring
	TenantID    whereHelperint64
	Description whereHelpernull_String
}{
	ID:          whereHelperint64{field: "\"comment_plates\".\"id\""},
	Plate:       whereHelperstring{field: "\"comment_plates\".\"plate\""},
	TenantID:    whereHelperint64{field: "\"comment_plates\".\"tenant_id\""},
	Description: whereHelpernull_String{field: "\"comment_plates\".\"description\""},
}

// CommentPlateRels is where relationship names are stored.
var CommentPlateRels = struct {
	Tenant string
}{
	Tenant: "Tenant",
}

// commentPlateR is where relationships are stored.
type commentPlateR struct {
	Tenant *Tenant `boil:"Tenant" json:"Tenant" toml:"Tenant" yaml:"Tenant"`
}

// NewStruct creates a new relationship struct
func (*commentPlateR) NewStruct() *commentPlateR {
	return &commentPlateR{}
}

func (o *CommentPlate) GetTenant() *Tenant {
	if o == nil {
		return nil
	}

	return o.R.GetTenant()
}

func (r *commentPlateR) GetTenant() *Tenant {
	if r == nil {
		return nil
	}

	return r.Tenant
}

// commentPlateL is where Load methods for each relationship are stored.
type commentPlateL struct{}

var (
	commentPlateAllColumns            = []string{"id", "plate", "tenant_id", "description"}
	commentPlateColumnsWithoutDefault = []string{"plate", "tenant_id"}
	commentPlateColumnsWithDefault    = []string{"id", "description"}
	commentPlatePrimaryKeyColumns     = []string{"id"}
	commentPlateGeneratedColumns      = []string{}
)

type (
	// CommentPlateSlice is an alias for a slice of pointers to CommentPlate.
	// This should almost always be used instead of []CommentPlate.
	CommentPlateSlice []*CommentPlate
	// CommentPlateHook is the signature for custom CommentPlate hook methods
	CommentPlateHook func(boil.Executor, *CommentPlate) error

	commentPlateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	commentPlateType                 = reflect.TypeOf(&CommentPlate{})
	commentPlateMapping              = queries.MakeStructMapping(commentPlateType)
	commentPlatePrimaryKeyMapping, _ = queries.BindMapping(commentPlateType, commentPlateMapping, commentPlatePrimaryKeyColumns)
	commentPlateInsertCacheMut       sync.RWMutex
	commentPlateInsertCache          = make(map[string]insertCache)
	commentPlateUpdateCacheMut       sync.RWMutex
	commentPlateUpdateCache          = make(map[string]updateCache)
	commentPlateUpsertCacheMut       sync.RWMutex
	commentPlateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var commentPlateAfterSelectMu sync.Mutex
var commentPlateAfterSelectHooks []CommentPlateHook

var commentPlateBeforeInsertMu sync.Mutex
var commentPlateBeforeInsertHooks []CommentPlateHook
var commentPlateAfterInsertMu sync.Mutex
var commentPlateAfterInsertHooks []CommentPlateHook

var commentPlateBeforeUpdateMu sync.Mutex
var commentPlateBeforeUpdateHooks []CommentPlateHook
var commentPlateAfterUpdateMu sync.Mutex
var commentPlateAfterUpdateHooks []CommentPlateHook

var commentPlateBeforeDeleteMu sync.Mutex
var commentPlateBeforeDeleteHooks []CommentPlateHook
var commentPlateAfterDeleteMu sync.Mutex
var commentPlateAfterDeleteHooks []CommentPlateHook

var commentPlateBeforeUpsertMu sync.Mutex
var commentPlateBeforeUpsertHooks []CommentPlateHook
var commentPlateAfterUpsertMu sync.Mutex
var commentPlateAfterUpsertHooks []CommentPlateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CommentPlate) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range commentPlateAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CommentPlate) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range commentPlateBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CommentPlate) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range commentPlateAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CommentPlate) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range commentPlateBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CommentPlate) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range commentPlateAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CommentPlate) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range commentPlateBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CommentPlate) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range commentPlateAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CommentPlate) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range commentPlateBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CommentPlate) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range commentPlateAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCommentPlateHook registers your hook function for all future operations.
func AddCommentPlateHook(hookPoint boil.HookPoint, commentPlateHook CommentPlateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		commentPlateAfterSelectMu.Lock()
		commentPlateAfterSelectHooks = append(commentPlateAfterSelectHooks, commentPlateHook)
		commentPlateAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		commentPlateBeforeInsertMu.Lock()
		commentPlateBeforeInsertHooks = append(commentPlateBeforeInsertHooks, commentPlateHook)
		commentPlateBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		commentPlateAfterInsertMu.Lock()
		commentPlateAfterInsertHooks = append(commentPlateAfterInsertHooks, commentPlateHook)
		commentPlateAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		commentPlateBeforeUpdateMu.Lock()
		commentPlateBeforeUpdateHooks = append(commentPlateBeforeUpdateHooks, commentPlateHook)
		commentPlateBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		commentPlateAfterUpdateMu.Lock()
		commentPlateAfterUpdateHooks = append(commentPlateAfterUpdateHooks, commentPlateHook)
		commentPlateAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		commentPlateBeforeDeleteMu.Lock()
		commentPlateBeforeDeleteHooks = append(commentPlateBeforeDeleteHooks, commentPlateHook)
		commentPlateBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		commentPlateAfterDeleteMu.Lock()
		commentPlateAfterDeleteHooks = append(commentPlateAfterDeleteHooks, commentPlateHook)
		commentPlateAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		commentPlateBeforeUpsertMu.Lock()
		commentPlateBeforeUpsertHooks = append(commentPlateBeforeUpsertHooks, commentPlateHook)
		commentPlateBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		commentPlateAfterUpsertMu.Lock()
		commentPlateAfterUpsertHooks = append(commentPlateAfterUpsertHooks, commentPlateHook)
		commentPlateAfterUpsertMu.Unlock()
	}
}

// OneG returns a single commentPlate record from the query using the global executor.
func (q commentPlateQuery) OneG() (*CommentPlate, error) {
	return q.One(boil.GetDB())
}

// One returns a single commentPlate record from the query.
func (q commentPlateQuery) One(exec boil.Executor) (*CommentPlate, error) {
	o := &CommentPlate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for comment_plates")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all CommentPlate records from the query using the global executor.
func (q commentPlateQuery) AllG() (CommentPlateSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all CommentPlate records from the query.
func (q commentPlateQuery) All(exec boil.Executor) (CommentPlateSlice, error) {
	var o []*CommentPlate

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to CommentPlate slice")
	}

	if len(commentPlateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all CommentPlate records in the query using the global executor
func (q commentPlateQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all CommentPlate records in the query.
func (q commentPlateQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count comment_plates rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q commentPlateQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q commentPlateQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if comment_plates exists")
	}

	return count > 0, nil
}

// Tenant pointed to by the foreign key.
func (o *CommentPlate) Tenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TenantID),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// LoadTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (commentPlateL) LoadTenant(e boil.Executor, singular bool, maybeCommentPlate interface{}, mods queries.Applicator) error {
	var slice []*CommentPlate
	var object *CommentPlate

	if singular {
		var ok bool
		object, ok = maybeCommentPlate.(*CommentPlate)
		if !ok {
			object = new(CommentPlate)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCommentPlate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCommentPlate))
			}
		}
	} else {
		s, ok := maybeCommentPlate.(*[]*CommentPlate)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCommentPlate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCommentPlate))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &commentPlateR{}
		}
		args[object.TenantID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &commentPlateR{}
			}

			args[obj.TenantID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.CommentPlates = append(foreign.R.CommentPlates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TenantID == foreign.ID {
				local.R.Tenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.CommentPlates = append(foreign.R.CommentPlates, local)
				break
			}
		}
	}

	return nil
}

// SetTenantG of the commentPlate to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.CommentPlates.
// Uses the global database handle.
func (o *CommentPlate) SetTenantG(insert bool, related *Tenant) error {
	return o.SetTenant(boil.GetDB(), insert, related)
}

// SetTenant of the commentPlate to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.CommentPlates.
func (o *CommentPlate) SetTenant(exec boil.Executor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"comment_plates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
		strmangle.WhereClause("\"", "\"", 2, commentPlatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TenantID = related.ID
	if o.R == nil {
		o.R = &commentPlateR{
			Tenant: related,
		}
	} else {
		o.R.Tenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			CommentPlates: CommentPlateSlice{o},
		}
	} else {
		related.R.CommentPlates = append(related.R.CommentPlates, o)
	}

	return nil
}

// CommentPlates retrieves all the records using an executor.
func CommentPlates(mods ...qm.QueryMod) commentPlateQuery {
	mods = append(mods, qm.From("\"comment_plates\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"comment_plates\".*"})
	}

	return commentPlateQuery{q}
}

// FindCommentPlateG retrieves a single record by ID.
func FindCommentPlateG(iD int64, selectCols ...string) (*CommentPlate, error) {
	return FindCommentPlate(boil.GetDB(), iD, selectCols...)
}

// FindCommentPlate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCommentPlate(exec boil.Executor, iD int64, selectCols ...string) (*CommentPlate, error) {
	commentPlateObj := &CommentPlate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"comment_plates\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, commentPlateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from comment_plates")
	}

	if err = commentPlateObj.doAfterSelectHooks(exec); err != nil {
		return commentPlateObj, err
	}

	return commentPlateObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CommentPlate) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CommentPlate) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no comment_plates provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(commentPlateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	commentPlateInsertCacheMut.RLock()
	cache, cached := commentPlateInsertCache[key]
	commentPlateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			commentPlateAllColumns,
			commentPlateColumnsWithDefault,
			commentPlateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(commentPlateType, commentPlateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(commentPlateType, commentPlateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"comment_plates\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"comment_plates\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into comment_plates")
	}

	if !cached {
		commentPlateInsertCacheMut.Lock()
		commentPlateInsertCache[key] = cache
		commentPlateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single CommentPlate record using the global executor.
// See Update for more documentation.
func (o *CommentPlate) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the CommentPlate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CommentPlate) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	commentPlateUpdateCacheMut.RLock()
	cache, cached := commentPlateUpdateCache[key]
	commentPlateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			commentPlateAllColumns,
			commentPlatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update comment_plates, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"comment_plates\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, commentPlatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(commentPlateType, commentPlateMapping, append(wl, commentPlatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update comment_plates row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for comment_plates")
	}

	if !cached {
		commentPlateUpdateCacheMut.Lock()
		commentPlateUpdateCache[key] = cache
		commentPlateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q commentPlateQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q commentPlateQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for comment_plates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for comment_plates")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CommentPlateSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CommentPlateSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentPlatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"comment_plates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, commentPlatePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in commentPlate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all commentPlate")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CommentPlate) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CommentPlate) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no comment_plates provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(commentPlateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	commentPlateUpsertCacheMut.RLock()
	cache, cached := commentPlateUpsertCache[key]
	commentPlateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			commentPlateAllColumns,
			commentPlateColumnsWithDefault,
			commentPlateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			commentPlateAllColumns,
			commentPlatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert comment_plates, could not build update column list")
		}

		ret := strmangle.SetComplement(commentPlateAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(commentPlatePrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert comment_plates, could not build conflict column list")
			}

			conflict = make([]string, len(commentPlatePrimaryKeyColumns))
			copy(conflict, commentPlatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"comment_plates\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(commentPlateType, commentPlateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(commentPlateType, commentPlateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert comment_plates")
	}

	if !cached {
		commentPlateUpsertCacheMut.Lock()
		commentPlateUpsertCache[key] = cache
		commentPlateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single CommentPlate record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CommentPlate) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single CommentPlate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CommentPlate) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no CommentPlate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), commentPlatePrimaryKeyMapping)
	sql := "DELETE FROM \"comment_plates\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from comment_plates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for comment_plates")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q commentPlateQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q commentPlateQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no commentPlateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from comment_plates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for comment_plates")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CommentPlateSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CommentPlateSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(commentPlateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentPlatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"comment_plates\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, commentPlatePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from commentPlate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for comment_plates")
	}

	if len(commentPlateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CommentPlate) ReloadG() error {
	if o == nil {
		return errors.New("orm: no CommentPlate provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CommentPlate) Reload(exec boil.Executor) error {
	ret, err := FindCommentPlate(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommentPlateSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("orm: empty CommentPlateSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommentPlateSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CommentPlateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentPlatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"comment_plates\".* FROM \"comment_plates\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, commentPlatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in CommentPlateSlice")
	}

	*o = slice

	return nil
}

// CommentPlateExistsG checks if the CommentPlate row exists.
func CommentPlateExistsG(iD int64) (bool, error) {
	return CommentPlateExists(boil.GetDB(), iD)
}

// CommentPlateExists checks if the CommentPlate row exists.
func CommentPlateExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"comment_plates\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if comment_plates exists")
	}

	return exists, nil
}

// Exists checks if the CommentPlate row exists.
func (o *CommentPlate) Exists(exec boil.Executor) (bool, error) {
	return CommentPlateExists(exec, o.ID)
}
